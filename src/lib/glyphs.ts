import type { Glyph, GlyphRepr, Glyphs, Meaning } from './types';

export const categories = {
	m: { name: 'Monadic function', bgColor: '#fdffb6', fgColor: '#ccac2b' },
	d: { name: 'Dyadic function', bgColor: '#ffd6a5', fgColor: '#ff4500' },
	a: { name: 'Monadic operator', bgColor: '#9bf6ff', fgColor: '#0dd3bb' },
	c: { name: 'Dyadic operator', bgColor: '#a0c4ff', fgColor: '#7193ff' },
	r: { name: 'Array', bgColor: '#ffadad', fgColor: '#ea0027' },
	h: { name: 'Hyperator', bgColor: '#caffbf', fgColor: '#94e044' },
	s: { name: 'Syntax', bgColor: '#ffc6ff', fgColor: '#ff66ac' },
}

const dy = 'dy', ex = 'ex', vi = 'vi', dz = 'dz', n2 = 'n2', a2 = 'a2', gn = 'gn', i1 = 'i1', i2 = 'i2', ax = 'ax', ng = 'ng', ka = 'ka', aw = 'aw', th = 'th', sv = 'sv', al = 'al', co = 'co';

const
	R = 'R',
	My = 'My', xDy = 'xDy',
	uAy = '(uA)y', xuAy = 'x(uA)y', mAy = '(mA)y', xmAy = 'x(mA)y', dAy = '(dA)y',xdAy = 'x(dA)y',
	uCvy = '(uCv)y', xuCvy = 'x(uCv)y', uCny = '(uCn)y', xuCny = 'x(uCn)y', uCey = '(uCe)y', xuCey = 'x(uCe)y',
	mCvy = '(mCv)y', xmCvy = 'x(mCv)y', mCny = '(mCn)y', xmCny = 'x(mCn)y', mCey = '(mCe)y', xmCey = 'x(mCe)y',
	dCvy = '(dCv)y', xdCvy = 'x(dCv)y', dCny = '(dCn)y', xdCny = 'x(dCn)y', dCey = '(dCe)y', xdCey = 'x(dCe)y';

const me = (patterns: string[], name: string, description: string | undefined = undefined, urls: Record<string, string> = {}) => ({ name, patterns, description, category: 'm', urls } as Meaning);
const sy = (name: string, description: string | undefined = undefined, urls: Record<string, string> = {}) => ({ name, description, category: 's', urls } as Meaning);

const gl = (glyph: GlyphRepr, ...meanings: [string, ...string[]][]) => ({ glyph, meanings: meanings.map(_ => [_[0], _.slice(1)]) } as Glyph);

export const glyphs: Glyphs = {
	dialects: {
		dy: { name: 'Dyalog APL', shortName: 'Dy' },
		ex: { name: 'Extended Dyalog APL', shortName: 'ExD' },
		vi: { name: 'Dyalog APL Vision', shortName: 'DVi' },
		dz: { name: 'dzaima/APL', shortName: 'dz' },
		n2: { name: 'NARS2000', shortName: 'N2k' },
		a2: { name: 'APL2', shortName: 'A2' },
		gn: { name: 'GNU APL', shortName: 'GNU' },
		i1: { name: 'ISO 8485:1989', shortName: '\'89' },
		i2: { name: 'ISO/IEC 13751:2001', shortName: '\'01' },
		ax: { name: 'APLX', shortName: 'AX' },
		ng: { name: 'ngn/apl', shortName: 'ngn' },
		ka: { name: 'Kap', shortName: 'Kap' },
		aw: { name: 'APL+WIN', shortName: 'A+W' },
		th: { name: 'APL\\360', shortName: '360' },
		sv: { name: 'APL.SV', shortName: 'SV' },
		al: { name: 'April', shortName: 'Apr' },
		co: { name: 'Co-dfns', shortName: 'Co' },
	},
	urls: {
		wiki: { name: 'APL Wiki' },
		dyalog: { name: 'Dyalog Reference' },
		nars2000: { name: 'NARS2000 Wiki' },
		gnu: { name: 'GNU APL Documentation' },
		paper: { name: 'Paper' },
		gh: { name: 'GitHub' },
		wikipedia: { name: 'Wikipedia' },
		aplx: { name: 'APLX Reference' },
		kap: { name: 'Kap Reference' },
	},
	meanings: {
		conj: me([My], 'Conjugate', '(Hyper)complex conjugate', { wiki: 'https://aplwiki.com/wiki/Conjugate' }),
		add: me([xDy], 'Addition', undefined, { wiki: 'https://aplwiki.com/wiki/Add' }),
		plusId: me([My], 'Identity', undefined, { wiki: 'https://aplwiki.com/wiki/Conjugate' }),
		neg: me([My], 'Negate', undefined, { wiki: 'https://aplwiki.com/wiki/Negate' }),
		sub: me([My], 'Subtraction', undefined, { wiki: 'https://aplwiki.com/wiki/Subtract' }),
		flipLetterCase: me([My], 'Flip Letter Case', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-minus' }),
		sign: me([My], 'Signum', undefined, { wiki: 'https://aplwiki.com/wiki/Signum' }),
		dir: me([My], 'Direction', 'Complex signum', { wiki: 'https://aplwiki.com/wiki/Signum' }),
		mul: me([xDy], 'Multiplication', undefined, { wiki: 'https://aplwiki.com/wiki/Times' }),
		queryLetterCase: me([My], 'Query Letter Case', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-times' }),
		setLetterCase: me([xDy], 'Set Letter Case', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-times' }),
		rec: me([My], 'Reciprocal', undefined, { wiki: 'https://aplwiki.com/wiki/Reciprocal' }),
		div: me([xDy], 'Division', undefined, { wiki: 'https://aplwiki.com/wiki/Divide' }),
		toTitleCase: me([My], 'To Title Case', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-divide' }),
		exp: me([My], 'Exponential', 'Power with Euler\'s number as the base', { wiki: 'https://aplwiki.com/wiki/Exponential' }),
		pow: me([xDy], 'Power', undefined, { wiki: 'https://aplwiki.com/wiki/Power_(function)' }),
		sqrt: me([My], 'Square Root', undefined, { wiki: 'https://aplwiki.com/wiki/Square_Root' }),
		root: me([xDy], 'Root', undefined, { wiki: 'https://aplwiki.com/wiki/Root' }),
		ln: me([My], 'Natural Logarithm', undefined, { wiki: 'https://aplwiki.com/wiki/Natural_Logarithm' }),
		log: me([xDy], 'Logarithm', undefined, { wiki: 'https://aplwiki.com/wiki/Logarithm' }),
		mInv: me([My], 'Matrix Inverse', undefined, { wiki: 'https://aplwiki.com/wiki/Matrix_Inverse' }),
		mDiv: me([xDy], 'Matrix Division', undefined, { wiki: 'https://aplwiki.com/wiki/Matrix_Divide' }),
		piT: me([My], 'Pi Times', undefined, { wiki: 'https://aplwiki.com/wiki/Pi_Times' }),
		circ: me([xDy], 'Circular Functions', 'A range of trigonometric and related functions selected using the left argument', { wiki: 'https://aplwiki.com/wiki/Circular' }),
		fact: me([My], 'Factorial', undefined, { wiki: 'https://aplwiki.com/wiki/Factorial' }),
		binom: me([xDy], 'Binomial Coefficient', undefined, { wiki: 'https://aplwiki.com/wiki/Binomial' }),
		roll: me([My], 'Roll', 'Random numbers as specified by the argument', { wiki: 'https://aplwiki.com/wiki/Roll' }),
		deal: me([xDy], 'Deal', 'Right argument random selections from the range defined by the left argument', { wiki: 'https://aplwiki.com/wiki/Deal' }),
		abs: me([My], 'Absolute Value', undefined, { wiki: 'https://aplwiki.com/wiki/Magnitude' }),
		mag: me([My], 'Magnitude', undefined, { wiki: 'https://aplwiki.com/wiki/Magnitude' }),
		mod: me([xDy], 'Residue', undefined, { wiki: 'https://aplwiki.com/wiki/Residue' }),
		caseFold: me([My], 'Case Fold', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-stile' }),
		ceil: me([My], 'Ceiling', 'The smallest integer greater than or equal to the argument', { wiki: 'https://aplwiki.com/wiki/Ceiling' }),
		max: me([xDy], 'Maximum', 'The largest argument', { wiki: 'https://aplwiki.com/wiki/Maximum' }),
		toUpper: me([My], 'To Uppercase', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-upstile' }),
		floor: me([My], 'Floor', 'The largest integer less than or equal to the argument', { wiki: 'https://aplwiki.com/wiki/Floor' }),
		min: me([xDy], 'Minimum', 'The smallest argument', { wiki: 'https://aplwiki.com/wiki/Minimum' }),
		toLower: me([My], 'To Lowercase', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-downstile' }),
		decode: me([xDy], 'Decode', 'Evaluate the right argument in the base defined by the left argument', { wiki: 'https://aplwiki.com/wiki/Decode' }),
		decode2: me([My], 'Base-2 Decode', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-uptack' }),
		encode: me([xDy], 'Encode', 'Represent the right argument in the base defined by the left argument', { wiki: 'https://aplwiki.com/wiki/Encode' }),
		encode2: me([My], 'Base-2 Encode', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-downtack' }),
		type: me([My], 'Type', 'Prototype array corresponding to the argument', { wiki: 'https://aplwiki.com/wiki/Type' }),
		same: me([My], 'Same', 'The argument, unchanged', { wiki: 'https://aplwiki.com/wiki/Identity' }),
		right: me([xDy], 'Right', 'The right argument, unchanged', { wiki: 'https://aplwiki.com/wiki/Identity' }),
		left: me([xDy], 'Left', 'The left argument, unchanged', { wiki: 'https://aplwiki.com/wiki/Identity' }),
		eq: me([xDy], 'Equal To', undefined, { wiki: 'https://aplwiki.com/wiki/Equal_to' }),
		isType: me([My], 'Is Type?', 'Equal to type', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-equals' }),
		dimension: me([My], 'Dimension', 'Hypercomplex dimension (1, 2, 4, or 8)'),
		neq: me([xDy], 'Not Equal To', undefined, { wiki: 'https://aplwiki.com/wiki/Not_Equal_to' }),
		nubSieve: me([My], 'Nub Sieve', 'Mask that marks the first occurrence of each element', { wiki: 'https://aplwiki.com/wiki/Nub_Sieve' }),
		isNotType: me([My], 'Is Not Type?', 'Not equal to type', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-notequalto' }),
		norm: me([My], 'Norm', 'Argument times the conjugate of the argument'),
		leq: me([xDy], 'Less Than or Equal To', undefined, { wiki: 'https://aplwiki.com/wiki/Less_than_or_Equal_to' }),
		isNonneg: me([My], 'Is Nonnegative?', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-lessthanorequalto' }),
		isInvisible: me([My], 'Is Invisible Character?', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-lessthanorequalto' }),
		sortAsc: me([My], 'Sort Ascending', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-wedge' }),
		le: me([xDy], 'Less Than', undefined, { wiki: 'https://aplwiki.com/wiki/Less_than' }),
		isPos: me([My], 'Is Positive?', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-lessthan' }),
		isControl: me([My], 'Is Control Character?', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-lessthan' }),
		majorCells: me([My], 'Major Cells', undefined, { wiki: 'https://aplwiki.com/wiki/Major_cell '}),
		condense: me([My], 'Condense', 'Compress a real array into an array of hypercomplex numbers', { nars2000: 'https://wiki.nars2000.org/index.php?title=Condense' }),
		ge: me([xDy], 'Greater Than', undefined, { wiki: 'https://aplwiki.com/wiki/Greater_than' }),
		isNeg: me([My], 'Is Negative?', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-greaterthan' }),
		isVisible: me([My], 'Is Visible Character?', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-greaterthan' }),
		join: me([My], 'Join', 'Merge array of arrays into single array', { wiki: 'https://aplwiki.com/wiki/Raze' }),
		dilate: me([My], 'Dilate', 'Expand an array of hypercomplex numbers into an array of reals', { nars2000: 'https://wiki.nars2000.org/index.php?title=Dilate' }),
		geq: me([xDy], 'Greater Than or Equal To', undefined, { wiki: 'https://aplwiki.com/wiki/Greater_than_or_Equal_to' }),
		isNonpos: me([My], 'Is Nonpositive?', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-greaterthanorequalto' }),
		isNotControl: me([My], 'Is Not Control Character?', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-greaterthanorequalto'}),
		sortDesc: me([My], 'Sort Descending', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-vel' }),
		match: me([xDy], 'Match', 'Compare the whole arrays for equality', { wiki: 'https://aplwiki.com/wiki/Match' }),
		depth: me([My], 'Depth', 'Level of nesting', { wiki: 'https://aplwiki.com/wiki/Depth' }),
		mismatch: me([xDy], 'Not Match', undefined, { wiki: 'https://aplwiki.com/wiki/Not_Match' }),
		tally: me([My], 'Tally', 'The amount of major cells', { wiki: 'https://aplwiki.com/wiki/Tally' }),
		or: me([xDy], 'Or', undefined, { wiki: 'https://aplwiki.com/wiki/Or' }),
		gcd: me([xDy], 'Greatest Common Divisor', undefined, { wiki: 'https://aplwiki.com/wiki/GCD' }),
		demote: me([My], 'Demote', 'Combine two leading axes (like ,[⍳2])', { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_greater_thandecrease_rank' }),
		gcdM: me([My], 'Monadic GCD', 'GCD reduction (any 1?)', { gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L13' }),
		and: me([xDy], 'And', undefined, { wiki: 'https://aplwiki.com/wiki/And' }),
		lcm: me([xDy], 'Least Common Multiple', undefined, { wiki: 'https://aplwiki.com/wiki/LCM' }),
		promote: me([My], 'Promote', 'Add a length-1 axis before the other axes', { wiki: 'https://aplwiki.com/wiki/Promote' }),
		lcmM: me([My], 'Monadic LCM', 'LCM reduction (all 1?)', { gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L14' }),
		nor: me([xDy], 'Nor', undefined, { wiki: 'https://aplwiki.com/wiki/Nor' }),
		notAnyEqualToType: me([My], 'Not Any Equal To Type', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-nand' }),
		notAll: me([My], 'Not All', 'Any 0?', { gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L15' }),
		nand: me([xDy], 'Nand', undefined, { wiki: 'https://aplwiki.com/wiki/Nand' }),
		notAllEqualToType: me([My], 'Not All Equal To Type', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-nor' }),
		none: me([My], 'None', 'All 0?', { gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L16' }),
		mix: me([My], 'Mix', 'Combine all elements into a single array', { wiki: 'https://aplwiki.com/wiki/Mix' }),
		take: me([xDy], 'Take', undefined, { wiki: 'https://aplwiki.com/wiki/Take' }),
		split: me([My], 'Split', 'Convert an axis to a level of nesting', { wiki: 'https://aplwiki.com/wiki/Split' }),
		drop: me([xDy], 'Drop', undefined, { wiki: 'https://aplwiki.com/wiki/Drop' }),
		enclose: me([My], 'Enclose', 'Wrap the argument into a nested scalar', { wiki: 'https://aplwiki.com/wiki/Enclose' }),
		penclose: me([xDy], 'Partitioned Enclose', 'Split the right argument into pieces specified by the left argument', { wiki: 'https://aplwiki.com/wiki/Partitioned_Enclose' }),
		partition: me([xDy], 'Partition', 'Split the right argument into pieces specified by the left argument', { wiki: 'https://aplwiki.com/wiki/Partition' }),
		first: me([My], 'First', 'The first element of the argument', { wiki: 'https://aplwiki.com/wiki/First' }),
		pick: me([xDy], 'Pick', 'Extract a value through layers of nesting', { wiki: 'https://aplwiki.com/wiki/Pick' }),
		nest: me([My], 'Nest', 'Enclose if simple', { wiki: 'https://aplwiki.com/wiki/Nest' }),
		subset: me([xDy], 'Subset', 'Is subset?', { nars2000: 'https://wiki.nars2000.org/index.php?title=Sets' }),
		discloseIfScalar: me([My], 'Disclose If Scalar', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-rightshoeunderbar' }),
		from: me([xDy], 'From', 'Function form of bracket indexing', { wiki: 'https://aplwiki.com/wiki/From' }),
		last: me([My], 'Last', 'Last element in ravel order'),
		superset: me([xDy], 'Superset', 'Is superset?', { nars2000: 'https://wiki.nars2000.org/index.php?title=Sets' }),
		index: me([xDy], 'Index', 'Items of the right argument as specified by the left argument', { wiki: 'https://aplwiki.com/wiki/Index_(function)' }),
		materialize: me([My], 'Materialize', 'Cast the argument to an array', { wiki: 'https://aplwiki.com/wiki/Materialise' }),
		mapKV: me([My], 'Map Key/Value Pairs', undefined, { gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L25' }),
		gradeUp: me([My], 'Grade Up', 'Indices that sort the argument in ascending order', { wiki: 'https://aplwiki.com/wiki/Grade' }),
		gradeDown: me([My], 'Grade Down', 'Indices that sort the argument in descending order', { wiki: 'https://aplwiki.com/wiki/Grade' }),
		gradeUpD: me([xDy], 'Dyadic Grade Up', 'Indices that sort the right argument in ascending order, according to the left argument', { wiki: 'https://aplwiki.com/wiki/Grade' }),
		gradeDownD: me([xDy], 'Dyadic Grade Up', 'Indices that sort the right argument in descending order, according to the left argument', { wiki: 'https://aplwiki.com/wiki/Grade' }),
		indexGeneratorR: me([My], 'Index Generator (Range)', 'Numbers in range defined by the argument', { wiki: 'https://aplwiki.com/wiki/Index_Generator' }),
		indexGeneratorI: me([My], 'Index Generator (Indices)', 'Indices with shape specified by the argument', { wiki: 'https://aplwiki.com/wiki/Index_Generator' }),
		indexOf: me([xDy], 'Index Of', undefined, { wiki: 'https://aplwiki.com/wiki/Index_Of' }),
		where: me([My], 'Where', 'True indices in the argument mask', { wiki: 'https://aplwiki.com/wiki/Indices' }),
		intervalIndex: me([xDy], 'Interval Index', 'Determine fitting interval, left argument giving beginning points', { wiki: 'https://aplwiki.com/wiki/Interval_Index' }),
		arrayLookup: me([xDy], 'Array Lookup', 'Like ⍳, but on major cells', { nars2000: 'https://wiki.nars2000.org/index.php?title=Array_Lookup' }),
		elementOf: me([xDy], 'Element Of', undefined, { wiki: 'https://aplwiki.com/wiki/Membership' }),
		enlist: me([My], 'Enlist', 'All simple elements of the argument, traversing nested elements', { wiki: 'https://aplwiki.com/wiki/Enlist' }),
		find: me([xDy], 'Find', 'Mask of the start corners of the appearances of the left argument in the right argument', { wiki: 'https://aplwiki.com/wiki/Find' }),
		union: me([xDy], 'Union', 'The left argument catenated with the elements of the right argument that don\'t appear in the left argument', { wiki: 'https://aplwiki.com/wiki/Union' }),
		nub: me([My], 'Unique', 'Unique elements', { wiki: 'https://aplwiki.com/wiki/Unique' }),
		intersection: me([xDy], 'Intersection', 'All elements of the left argument that appear in the right argument', { wiki: 'https://aplwiki.com/wiki/Intersection' }),
		nubIn: me([My], 'Nub in', 'Table of which elements are their unique', { wiki: 'https://aplwiki.com/wiki/Nub_in' }),
		not: me([My], 'Not', undefined, { wiki: 'https://aplwiki.com/wiki/Not' }),
		m1: me([My], '1 Minus', 'Like Not but extended to floats [0; 1]', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-tilde '}),
		without: me([xDy], 'Without', 'All elements of the left argument that don\'t appear in the right argument', { wiki: 'https://aplwiki.com/wiki/Without' }),
		symDiff: me([xDy], 'Symmetric Difference', 'Elements that appear in exactly one of the arguments', { nars2000: 'https://wiki.nars2000.org/index.php?title=Sets' }),
		reduce: me([dAy], 'Reduce', undefined, { wiki: 'https://aplwiki.com/wiki/Reduce' }),
		reduceF: me([dAy], 'Reduce First', undefined, { wiki: 'https://aplwiki.com/wiki/Reduce' }),
		wreduce: me([xdAy], 'Windowed Reduce', undefined, { wiki: 'https://aplwiki.com/wiki/Windowed_Reduce' }),
		wreduceF: me([xdAy], 'Windowed Reduce First', undefined, { wiki: 'https://aplwiki.com/wiki/Windowed_Reduce' }),
		compress: me([xDy], 'Compress', 'Select elements of the right argument marked by the left argument mask', { wiki: 'https://aplwiki.com/wiki/Replicate' }),
		replicate: me([xDy], 'Replicate', undefined, { wiki: 'https://aplwiki.com/wiki/Replicate' }),
		compressO: me([uAy], 'Compress', 'Select elements of the argument marked by the operand mask', { wiki: 'https://aplwiki.com/wiki/Replicate' }),
		replicateO: me([uAy], 'Replicate', undefined, { wiki: 'https://aplwiki.com/wiki/Replicate' }),
		compressF: me([xDy], 'Compress First', 'Select elements of the right argument marked by the left argument mask', { wiki: 'https://aplwiki.com/wiki/Replicate' }),
		replicateF: me([xDy], 'Replicate First', undefined, { wiki: 'https://aplwiki.com/wiki/Replicate' }),
		compressOF: me([uAy], 'Compress First', 'Select elements of the argument marked by the operand mask', { wiki: 'https://aplwiki.com/wiki/Replicate' }),
		replicateOF: me([uAy], 'Replicate First', undefined, { wiki: 'https://aplwiki.com/wiki/Replicate' }),
		scan: me([dAy], 'Scan', undefined, { wiki: 'https://aplwiki.com/wiki/Scan' }),
		scanF: me([dAy], 'Scan First', undefined, { wiki: 'https://aplwiki.com/wiki/Scan' }),
		expand: me([xDy], 'Expand', undefined, { wiki: 'https://aplwiki.com/wiki/Expand' }),
		expandF: me([xDy], 'Expand First', undefined, { wiki: 'https://aplwiki.com/wiki/Expand' }),
		expandO: me([uAy], 'Expand', undefined, { wiki: 'https://aplwiki.com/wiki/Expand' }),
		expandOF: me([uAy], 'Expand First', undefined, { wiki: 'https://aplwiki.com/wiki/Expand' }),
		applyRight: me([xmAy], 'Apply To Right Argument (?)', '⊢∘f', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-backslashbar' }),
		ravel: me([My], 'Ravel', 'All elements of the argument as a vector', { wiki: 'https://aplwiki.com/wiki/Ravel' }),
		cat: me([xDy], 'Catenate', undefined, { wiki: 'https://aplwiki.com/wiki/Catenate' }),
		table: me([My], 'Ravel Items', undefined, { wiki: 'https://aplwiki.com/wiki/Table' }),
		catF: me([xDy], 'Catenate First', undefined, { wiki: 'https://aplwiki.com/wiki/Catenate' }),
		shape: me([My], 'Shape', undefined, { wiki: 'https://aplwiki.com/wiki/Shape' }),
		reshape: me([xDy], 'Reshape', undefined, { wiki: 'https://aplwiki.com/wiki/Reshape' }),
		reverse: me([My], 'Reverse', undefined, { wiki: 'https://aplwiki.com/wiki/Reverse' }),
		rotate: me([xDy], 'Rotate', undefined, { wiki: 'https://aplwiki.com/wiki/Rotate' }),
		reverseF: me([My], 'Reverse First', undefined, { wiki: 'https://aplwiki.com/wiki/Reverse' }),
		rotateF: me([xDy], 'Rotate First', undefined, { wiki: 'https://aplwiki.com/wiki/Rotate' }),
		transpose: me([My], 'Transpose', undefined, { wiki: 'https://aplwiki.com/wiki/Transpose#Monadic_usage' }),
		transposeD: me([xDy], 'Dyadic Transpose', undefined, { wiki: 'https://aplwiki.com/wiki/Transpose#Dyadic_usage' }),
		each1: me([mAy], 'Each', 'Apply a function to each element of an array', { wiki: 'https://aplwiki.com/wiki/Each' }),
		each2: me([xdAy], 'Each', 'Apply a function to each element of two arrays', { wiki: 'https://aplwiki.com/wiki/Each' }),
		constant: me([uAy, xuAy], 'Constant', 'A function that always returns the operand', { wiki: 'https://aplwiki.com/wiki/Constant' }),
		commute: me([xdAy], 'Commute', 'Call the operand with the arguments swapped', { wiki: 'https://aplwiki.com/wiki/Commute' }),
		duplicate: me([dAy], 'Duplicate', 'Call the operand with the argument as both left and right', { wiki: 'https://aplwiki.com/wiki/Commute' }),
		repeat: me([mCvy, xdCvy], 'Repeat', 'Repeat a function a specified number of times', { wiki: 'https://aplwiki.com/wiki/Power_(operator)' }),
		until: me([mCey, xdCey], 'Repeat Until', 'Repeat a function until a predicate is satisfied', { wiki: 'https://aplwiki.com/wiki/Power_(operator)' }),
		cumulativeRepeat: me([mCvy, xdCvy, mCey, xdCey], 'Cumulative Repeat', 'Like ⍣, but collect intermediary results'),
		convolution: me([xdCey], 'Convolution', undefined, { nars2000: 'https://wiki.nars2000.org/index.php?title=Convolution' }),
		innerProduct: me([xdCey], 'Inner Product', 'Apply a function to each pair in the arguments and combine the results with another function', { wiki: 'https://aplwiki.com/wiki/Inner_Product' }),
		alternant: me([dCey], 'Alternant', 'Generalized discriminant', { nars2000: 'https://wiki.nars2000.org/index.php?title=Determinant_Operator' }),
		outerProduct: me([xdAy], 'Outer Product', 'Apply a function to the cartesian product of the two arguments', { wiki: 'https://aplwiki.com/wiki/Outer_Product' }),
		compose: me([mCny], 'Compose', 'Apply a function after another', { wiki: 'https://aplwiki.com/wiki/Compose' }),
		after: me([xdCey], 'After', 'Preprocess the right argument to a function with another function', { wiki: 'https://aplwiki.com/wiki/Beside' }),
		bind: me([dCvy, uCey], 'Bind', 'Bind an argument to a dyadic function, making it monadic', { wiki: 'https://aplwiki.com/wiki/Bind' }),
		before: me([mCey, xmCey], 'Before', 'Preprocess the left argument to a function with another function', { wiki: 'https://aplwiki.com/wiki/Reverse_Compose' }),
		atop: me([xmCey], 'Atop', 'Call a monad using the result of a dyad as the argument', { wiki: 'https://aplwiki.com/wiki/Atop_(operator)' }),
		atRank: me([mCvy, xdCvy], 'Rank', 'Apply a function at a specified rank', { wiki: 'https://aplwiki.com/wiki/Rank_(operator)' }),
		over: me([xdCey], 'Over', 'Preprocess all arguments to a function with another function', { wiki: 'https://aplwiki.com/wiki/Over' }),
		atDepth: me([mCvy, xdCvy], 'Depth', 'Apply a function at a specified depth', { wiki: 'https://aplwiki.com/wiki/Depth_(operator)' }),
		under: me([mCny, xdCny], 'Under', 'Apply a function, then another function, then the first function\'s inverse', { wiki: 'https://aplwiki.com/wiki/Under' }),
		eachLeft: me([xdAy], 'Each Left', 'Each, only on the left argument', { gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L74' }),
		eachRight: me([xdAy], 'Each Right', 'Each, only on the right argument', { gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L75' }),
		at: me([mCny, mCvy, uCny, uCvy], 'At', 'Transform selected elements of an array', { wiki: 'https://aplwiki.com/wiki/At' }),
		obverse: me([mCny, xdCey], 'Obverse', 'Specify the inverse function for a function', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-deltilde' }),
		evalInput: sy('Evaluated Input', 'Input and evaluate as an APL expression', { wiki: 'https://aplwiki.com/wiki/Quad_name' }),
		stdout: sy('Standard Output', undefined, { wiki: 'https://aplwiki.com/wiki/Quad_name' }),
		sys: sy('System Name', 'First character of a system name', { wiki: 'https://aplwiki.com/wiki/Quad_name' }),
		stringInput: sy('String Input', undefined, { wiki: 'https://aplwiki.com/wiki/Quad_name' }),
		stderr: sy('Standard Error', undefined, { wiki: 'https://aplwiki.com/wiki/Quad_name' }),
		variant: me([mCvy, xdCvy], 'Variant', 'Select a related function', { wiki: 'https://aplwiki.com/wiki/Variant', dyalog: 'https://help.dyalog.com/18.2/Content/Language/Primitive%20Operators/Variant.htm', nars2000: 'https://wiki.nars2000.org/index.php?title=Variant' }),
		keyI: me([dAy], 'Key (Indices)', 'Apply a function to unique elements of an array and their indices', { wiki: 'https://aplwiki.com/wiki/Key' }),
		keyV: me([xdAy] ,'Key (Values)', 'Apply a function to unique elements of the left array and the corresponding entries in the right array', { wiki: 'https://aplwiki.com/wiki/Key' }),
		keyVocI: me([uAy], 'Key With Vocabulary (Indices)', 'Locations of each element in the vocabulary in the argument', { gh: 'https://github.com/abrudz/dyalog_vision#user-content-quadequal' }),
		keyVocV: me([xuAy], 'Key With Vocabulary (Values)', 'Elements of the left argument corresponding to locations of elements in the vocabulary in the right argument', { gh: 'https://github.com/abrudz/dyalog_vision#user-content-quadequal' }),
		getMap: me([uAy], 'Get In Map', undefined, { gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L73' }),
		setMap: me([xuAy], 'Set In Map', undefined, { gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L73' }),
		diagonals: me([mAy], 'Diagonals', 'Apply a function to each diagonal of a matrix', { gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L89' }),
		stencil: me([dCvy], 'Stencil', 'Apply a function to windows of an array', { wiki: 'https://aplwiki.com/wiki/Stencil' }),
		beam: me([uAy, xuAy], 'I-Beam', 'Access non-primitive, implementation specific functions', { wiki: 'https://aplwiki.com/wiki/I-Beam', dyalog: 'https://help.dyalog.com/18.2/Content/Language/Primitive%20Operators/I%20Beam.htm' }),
		execute: me([My], 'Execute', undefined, { wiki: 'https://aplwiki.com/wiki/Execute' }),
		format: me([My], 'Format', undefined, { wiki: 'https://aplwiki.com/wiki/Format#Monadic_form' }),
		dformat: me([xDy], 'Format With Specification', 'Format specifying column widths, decimal places and optionally scientific notation', { wiki: 'https://aplwiki.com/wiki/Format#Dyadic_form' }),
		zilde: me([R], 'Zilde', 'Empty numeric vector', { wiki: 'https://aplwiki.com/wiki/Zilde' }),
		inf: me([R], 'Infinity', 'The largest number', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-infinity' }),
		ninf: me([R], 'Negative Infinity', 'The smallest number', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-negativeinfinity' }),
		nan: me([R], 'Not a Number', undefined, { nars2000: 'https://wiki.nars2000.org/index.php?title=NaN' }),
		cartM: me([My], 'Imaginary', 'i × arg', { wiki: 'https://aplwiki.com/wiki/Imaginary' }),
		cartD: me([xDy], 'Complex', 'left + i × right', { wiki: 'https://aplwiki.com/wiki/Complex_(function)' }),
		mstringE: me([My], 'String Enhancement (Monadic)', '${expr} inside a string is evaluated', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-dollarsign' }),
		dstringE: me([xDy], 'String Enhancement (Dyadic)', '${idx} is replaced with the corresponding item in the argument', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-dollarsign' }),
		range: me([xDy], 'Range', undefined, { wiki: 'https://aplwiki.com/wiki/Range' }),
		multisets: me([mAy, xdAy], 'Multisets', 'Turns set functions into multiset functions', { nars2000: 'https://wiki.nars2000.org/index.php?title=Multisets' }),
		countIn: me([xDy], 'Count In', 'Count occurrences of each of the left argument in the right argument', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-leftshoestile' }),
		probab: me([xdAy], 'Probability-logical Function', 'Multiplicative fuzzy logic (probabalistic) function corresponding to the Boolean function given', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-percent' }),
		merge: me([xDy], 'Merge', 'Compose array by choosing each element from the corresponding element in each of a set of sources', { wiki: 'https://aplwiki.com/wiki/Case' }),
		pair: me([xDy], 'Pair', undefined, { wiki: 'https://aplwiki.com/wiki/Pair' }),
		halfPair: me([My], 'Half Pair', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-semicolonunderbar' }),
		factors: me([My], 'Factors', undefined, { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-stiletilde' }),
		primeRelated: me([xDy], 'Prime Related Functions', 'Prime-related functions on the right argument, selected by left argument', { gh: 'https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-stiletilde', nars2000: 'https://wiki.nars2000.org/index.php?title=Primes' }),
		primeFactors: me([My], 'Prime Factors', undefined, { nars2000: 'https://wiki.nars2000.org/index.php?title=Primes' }),
		null: me([mAy, xdAy], 'Null', 'The identity operator, useful for casting hybrids to functions', { nars2000: 'https://wiki.nars2000.org/index.php?title=Null' }),
		combinatorial: me([xuAy], 'Combinatorial', 'Combinatorial functions selected by the operand', { nars2000: 'https://wiki.nars2000.org/index.php?title=Combinatorial' }),
		matrix: me([mAy, xdAy], 'Matrix', 'Apply a function to a diagonalizable matrix', { nars2000: 'https://wiki.nars2000.org/index.php?title=Matrix' }),
		deriv: me([mAy, xdAy], 'Derivative', undefined, { nars2000: 'https://wiki.nars2000.org/index.php?title=Derivative' }),
		integ: me([xmAy], 'Integral', undefined, { nars2000: 'https://wiki.nars2000.org/index.php?title=Integral' }),
		transform: me(['(d(mH)e)y'], 'Transform', undefined, { paper: 'http://www.sudleyplace.com/APL/A%20Transform%20Hyperator%20in%20APL.pdf' }),
		dfn: sy('Dfn', 'Wrap a dfn (anonymous function) definition', { wikipedia: 'https://en.wikipedia.org/wiki/Direct_function' }),
		dop: sy('Dop', 'Wrap a dop (anonymous operator) definition', { wikipedia: 'https://en.wikipedia.org/wiki/Direct_function' }),
		dhyp: sy('Dhyp', 'Wrap a dhyp (anonymous hyperator) definition', { nars2000: 'https://wiki.nars2000.org/index.php?title=Anonymous_Functions/Operators/Hyperators' }),
		larg: sy('Left Argument', undefined, { wikipedia: 'https://en.wikipedia.org/wiki/Direct_function' }),
		rarg: sy('Right Argument', undefined, { wikipedia: 'https://en.wikipedia.org/wiki/Direct_function' }),
		lop: sy('Left Operand', undefined, { wikipedia: 'https://en.wikipedia.org/wiki/Direct_function', gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L98' }),
		rop: sy('Right Operand', undefined, { wikipedia: 'https://en.wikipedia.org/wiki/Direct_function', gh: 'https://github.com/dzaima/APL/blob/master/docs/chars.txt#L99' }),
		lhyp: sy('Left Hyperand', undefined, { nars2000: 'https://wiki.nars2000.org/index.php?title=Anonymous_Functions/Operators/Hyperators#Hyperator_Hyperands' }),
		rhyp: sy('Right Hyperand', undefined, { nars2000: 'https://wiki.nars2000.org/index.php?title=Anonymous_Functions/Operators/Hyperators#Hyperator_Hyperands' }),
		axisArg: sy('Axis Argument', undefined, { nars2000: 'https://wiki.nars2000.org/index.php?title=Anonymous_Functions/Operators/Hyperators#Axis_Operator' }),
		guard: sy('Guard', 'Dfn guard: run RHS if LHS is true', { dyalog: 'https://help.dyalog.com/latest/#Language/Defined%20Functions%20and%20Operators/DynamicFunctions/Guards.htm' }),
		control: sy('Control Structure', 'Begin a control structure name', { wiki: 'https://aplwiki.com/wiki/Control_structure' }),
		label: sy('Label', 'Target for a branch', { dyalog: 'https://help.dyalog.com/18.2/Content/Language/Defined%20Functions%20and%20Operators/TradFns/Statements.htm' }),
		errorGuard: sy('Error Guard', 'If an error of the LHS category occurs, return the RHS', { dyalog: 'https://help.dyalog.com/latest/#Language/Defined%20Functions%20and%20Operators/DynamicFunctions/Error%20Guards.htm' }),
		bindex: sy('Index', 'Index into an array', { wiki: 'https://aplwiki.com/wiki/Indexing' }),
		axis: sy('Function Axis', 'Specify an axis for a function', { wiki: 'https://aplwiki.com/wiki/Function_axis' }),
		semi: sy('Axis Separator', 'Inside a bracket index, separates the different axes', { wiki: 'https://aplwiki.com/wiki/Indexing' }),
		assign: sy('Assignment', undefined, { wiki: 'https://aplwiki.com/wiki/Assignment' }),
		return: sy('Return', 'Return early from a dfn'),
		sink: sy('Sink', 'Don\'t print the result of an expression', { nars2000: 'https://wiki.nars2000.org/index.php?title=Sink' }),
		branch: sy('Branch', undefined, { wiki: 'https://aplwiki.com/wiki/Branch' }),
		tradfn: sy('Tradfn Definition', undefined, { wiki: 'https://aplwiki.com/wiki/Defined_function_(traditional)' }),
		recfn: sy('Recurse Function', 'In a dfn, refer to the dfn itself', { wikipedia: 'https://en.wikipedia.org/wiki/Direct_function', dyalog: 'https://help.dyalog.com/latest/#Language/Defined%20Functions%20and%20Operators/DynamicFunctions/Recursion.htm' }),
		recop: sy('Recurse Operator', 'In a dop, refer to the dop itself', { wikipedia: 'https://en.wikipedia.org/wiki/Direct_function', dyalog: 'https://help.dyalog.com/latest/#Language/Defined%20Functions%20and%20Operators/DynamicFunctions/Recursion.htm' }),
		rechyp: sy('Recurse Hyperator', 'In a dhyp, refer to the dhyp itself', { nars2000: 'https://wiki.nars2000.org/index.php?title=Anonymous_Functions/Operators/Hyperators#Recursion' }),
		negative: sy('Negative', 'Mark a number as negative', { wiki: 'https://aplwiki.com/wiki/High_minus' }),
		inverse: sy('Inverse', 'The inverse of a function'),
		dfns: sy('Dfns Workspace', 'First character of a dfns workspace name', { wiki: 'https://aplwiki.com/wiki/Dfns_workspace' }),
		eS: sy('Exponential Separator', 'Separates the multiplier and exponent of a number'),
		jS: sy('Complex Separator', 'Separates the real and imaginary part of a complex number'),
		adS: sy('Complex Angle Degrees'),
		ahS: sy('Complex Angle Signed Half Unit'),
		arS: sy('Complex Angle Radians'),
		auS: sy('Complex Angle Unsigned Unit'),
		bS: sy('Base Point Notation'),
		gS: sy('Gamma Point Notation'),
		pS: sy('Pi Point Notation'),
		rS: sy('Rational Notation'),
		vS: sy('Multiprecision Float'),
		xS: sy('Euler Point Notation'),
		zS: sy('Zeta Point Notation'),
		ball: sy('Ball Arithmetic Notation'),
		ijkS: sy('Quaternion Notation'),
		ijklS: sy('Octonion Notation'),
		sep: sy('Statement Separator'),
		comment: sy('Comment', 'Start a comment that ends at the end of the line', { wiki: 'https://aplwiki.com/wiki/Comment' }),
		char: sy('Character Literal', 'Character vector/scalar delimiter', { wiki: 'https://aplwiki.com/wiki/String' }),
		str: sy('String Literal', 'Like a character literal, but with escapes and always a vector'),
		spawn: me([mAy, xdAy], 'Spawn', 'Run the operand in a green thread', { wiki: 'https://aplwiki.com/wiki/Spawn' }),
		rootNs: me([R], 'Root Namespace', undefined, { dyalog: 'https://help.dyalog.com/latest/#Language/Introduction/Namespaces/Namespaces.htm' }),
		parentNs: me([R], 'Parent Namespace', undefined, { dyalog: 'https://help.dyalog.com/latest/#Language/Introduction/Namespaces/Namespaces.htm' }),
		rank: me([My], 'Rank', undefined, { wiki: 'https://aplwiki.com/wiki/Rank' }),
		formatByExample: me([xDy], 'Format By Example', 'Format the right argument accoding to the left argument "example"', { wiki: 'https://aplwiki.com/wiki/Format#Dyadic_form' }),
		hex: sy('Hexadecimal Number', undefined, { gnu: 'https://www.gnu.org/software/apl/apl.html#Section-2_002e14' }),
		bitAnd: me([xDy], 'Bitwise And', undefined, { gnu: 'https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d' }),
		bitOr: me([xDy], 'Bitwise Or', undefined, { gnu: 'https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d' }),
		bitNand: me([xDy], 'Bitwise Nand', undefined, { gnu: 'https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d' }),
		bitNor: me([xDy], 'Bitwise Nor', undefined, { gnu: 'https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d' }),
		bitXor: me([xDy], 'Bitwise Xor', undefined, { gnu: 'https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d' }),
		bitXnor: me([xDy], 'Bitwise Xnor', undefined, { gnu: 'https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d' }),
		bitAnd0: me([My], 'Bitwise And With 0', undefined, { gnu: 'https://www.gnu.org/software/apl/apl.html#Monadic-_005b_003f_005d_005b_003f_005d' }),
		bitOr0: me([My], 'Bitwise Or With 0', undefined, { gnu: 'https://www.gnu.org/software/apl/apl.html#Monadic-_005b_003f_005d_005b_003f_005d-and-_005b_003f_005d_005b_003f_005d' }),
		bitNor0: me([My], 'Bitwise Nor With 0', undefined, { gnu: 'https://www.gnu.org/software/apl/apl.html#Monadic-_005b_003f_005d_005b_003f_005d-and-_005b_003f_005d_005b_003f_005d' }),
		qrFact: me(['M[v]y'], 'QR Factorization', undefined, { gnu: 'https://www.gnu.org/software/apl/apl.html#Section-2_002e20' }),
		matrixProduct: me([xDy], 'Matrix Product', 'Like +.× but faster (and only for matrices)', { gnu: 'https://www.gnu.org/software/apl/apl.html#Section-2_002e41' }),
		conditional: sy('Conditional', '???', { gnu: 'https://www.gnu.org/software/apl/apl.html#Section-2_002e40' }),
		sinkF: me([My], 'Sink', 'Don\'t print the result of an expression', { gnu: 'https://www.gnu.org/software/apl/apl.html#Section-2_002e17' }),
		localVar: sy('Local Variable', 'Mark a variable as local inside a tradfn', { wiki: 'https://aplwiki.com/wiki/Defined_function_(traditional)#Semi-colons' }),
		shyRes: sy('Shy Result', 'Indicate that a tradfn result is shy', { wiki: 'https://aplwiki.com/wiki/Defined_function_(traditional)#Braces' }),
		optLeft: sy('Optional Left Argument', 'Indicate that a tradfn\'s left argument is optional', { wiki: 'https://aplwiki.com/wiki/Defined_function_(traditional)#Braces' }),
		pictureFormat: me([xDy], 'Picture Format', undefined, { aplx: 'https://microapl.com/apl_help/ch_020_020_670.htm' }),
		fileRead: me([My], 'Read File', 'Read a component from a file', { aplx: 'https://microapl.com/apl_help/ch_020_020_720.htm' }),
		fileInfo: me([xDy], 'File Info', 'Read information from a file selected by the left argument', { aplx: 'https://microapl.com/apl_help/ch_020_020_720.htm' }),
		fileRename: me([xDy], 'Rename File', undefined, { aplx: 'https://microapl.com/apl_help/ch_020_020_720.htm' }),
		fileWrite: me([xDy], 'Write File', 'Write a component to a file', { aplx: 'https://microapl.com/apl_help/ch_020_020_730.htm' }),
		fileSetAllocation: me([My], 'Set File Allocation Quota', 'Set how much a file can hold', { aplx: 'https://microapl.com/apl_help/ch_020_020_740.htm' }),
		fileHold: me([xDy], 'File Hold', 'Lock or unlock a file', { aplx: 'https://microapl.com/apl_help/ch_020_020_740.htm' }),
		fileDeleteC: me([My], 'Delete File Component', undefined, { aplx: 'https://microapl.com/apl_help/ch_020_020_750.htm' }),
		fileDelete: me([xDy], 'Delete File', undefined, { aplx: 'https://microapl.com/apl_help/ch_020_020_750.htm' }),
		stop: me([My], 'Stop', 'Return an empty character matrix', { aplx: 'https://microapl.com/apl_help/ch_020_020_753.htm' }),
		lock: sy('Lock', 'Lock a function definition, so that it can\'t be read or modified', { aplx: 'https://microapl.com/apl_help/ch_020_020_950.htm' }),
		approxEq: me([xDy], 'Approximately Equal To', undefined, { gh: 'https://github.com/abrudz/ngn-apl/blob/master/apl.js#L34' }),
		valences: me([mCey, xmCey], 'Valences', 'Apply the left function if called monadically and the right function if called dyadically'),
		raise: me([My], 'Raise', 'Raise an exception'),
		idElem: me([dCvy], 'Identity Element', 'Set the identity element for a function'),
		oneChar: sy('Character', 'A literal for a single scalar character', { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_character_syntax' }),
		tuple: sy('Tuple', 'Separates entries in a tuple literal', { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_n_tuples' }),
		globalFn: sy('Global Function', undefined, { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_function_definition' }),
		assignFn: sy('Assign Function', 'Bind a function to a name', { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_local_function_declaration' }),
		createFnRef: sy('Create Function Reference', 'Turn a function into a primitive', { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_%CE%BB_create_function_reference' }),
		applyFnRef: sy('Apply Function Reference', 'Call a function wrapped in a reference', { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_apply_function_from_function_reference' }),
		dropFirst: me([My], 'Drop First', undefined, { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_dropdrop_first' }),
		keyF: me([xDy], 'Key', 'Unique values of the left array, each paired with the list of corresponding entries from the right array', { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_key' }),
		bitwise: me([xdAy, mAy], 'Bitwise', 'Derive a bitwise function from a boolean function', { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_derive_bitwise' }),
		parallel: me([mAy, xdAy], 'Parallel', 'Apply a function in parallel (with multiple threads)'),
		inverseF: me([mAy, xdAy], 'Inverse', undefined, { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_inverse' }),
		withe: me([dCny], 'Withe', 'Right hook', { wiki: 'https://aplwiki.com/wiki/Withe' }),
		fork: sy('Fork', undefined, { kap: 'https://kapdemo.dhsdevelopments.com/reference.html#_and_fork' }),
		member: sy('Member Access', 'Access an entry of a namespace/object'),
		decimal: sy('Decimal Point'),
		bin: sy('Binary Number'),
		ieeeFloat: sy('IEEE Float', 'Floating point number as a hex representation of an IEEE double'),
		adjacent: sy('Adjacent Output', 'Print multiple arrays next to each other'),
		digSep: sy('Digit Separator', 'Ignored, separates digits for readability'),
	},
	glyphs: [
		gl('+', ['plusId', dy, ex, vi, dz, n2, a2, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['conj', dy, ex, vi, n2, a2, gn, i2, ng, ka, al, co], ['add', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co]),
		gl('-', ['neg', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['sub', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['flipLetterCase', ex, dz]),
		gl('×', ['sign', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['dir', dy, ex, vi, n2, a2, gn, i2, ng, ka, al, co], ['mul', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['queryLetterCase', ex, dz], ['setLetterCase', ex]),
		gl('÷', ['rec', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['div', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['toTitleCase', ex]),
		gl('*', ['exp', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['pow', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co]),
		gl('√', ['sqrt', ex, vi, dz, n2, ka], ['root', ex, vi, dz, n2, ka]),
		gl('⍟', ['ln', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['log', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co]),
		gl('⌹', ['mInv', dy, ex, vi, n2, a2, gn, i1, i2, ax, ng, ka, aw, sv, al, co], ['mDiv', dy, ex, vi, n2, a2, gn, i1, i2, ax, ng, ka, aw, sv, al, co], ['qrFact', gn]),
		gl('○', ['piT', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, th, sv, al, co], ['circ', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, th, sv, al, co]),
		gl('!', ['fact', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['binom', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co]),
		gl('?', ['roll', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['deal', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co]),
		gl('|', ['abs', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['mag', dy, ex, vi, n2, a2, gn, i2, ng, ka, al, co], ['mod', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['caseFold', ex]),
		gl('⌈', ['ceil', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['max', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['toUpper', ex, dz]),
		gl('⌊', ['floor', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['min', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['toLower', ex, dz]),
		gl('⊥', ['decode', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['decode2', ex, dz]),
		gl('⊤', ['encode', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['encode2', ex, dz], ['type', n2]),
		gl('⊢', ['same', dy, ex, vi, dz, n2, gn, ax, ng, ka, al, co], ['right', dy, ex, vi, dz, n2, gn, i2, ax, ng, ka, al, co]),
		gl('⊣', ['same', dy, ex, vi, dz, n2, ng, co], ['left', dy, ex, vi, dz, n2, gn, i2, ax, ng, ka, al, co], ['sink', gn], ['stop', ax, ka, al]),
		gl('=', ['eq', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['isType', ex], ['rank', vi], ['dimension', n2]),
		gl('≠', ['neq', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['nubSieve', dy, vi, al, co], ['isNotType', ex], ['norm', n2]),
		gl('≤', ['leq', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['isNonneg', ex], ['isInvisible', ex], ['sortAsc', vi]),
		gl('<', ['le', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['isPos', ex], ['isControl', ex], ['majorCells', vi], ['sortAsc', dz], ['condense', n2], ['promote', ka]),
		gl('>', ['ge', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['isNeg', ex], ['isVisible', ex], ['join', vi], ['sortDesc', dz], ['dilate', n2], ['demote', ka]),
		gl('≥', ['geq', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['isNonpos', ex], ['isNotControl', ex], ['sortDesc', vi]),
		gl('≡', ['match', dy, ex, vi, dz, n2, a2, gn, i2, ax, ng, ka, aw, al, co], ['depth', dy, ex, vi, dz, n2, a2, gn, i2, ax, ng, ka, aw, al, co]),
		gl('≢', ['mismatch', dy, ex, vi, dz, n2, ax, ng, ka, aw, al, co], ['tally', dy, ex, vi, dz, n2, ng, ka, al, co]),
		gl('∨', ['or', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['gcd', dy, ex, vi, dz, n2, gn, i2, ng, co], ['sortDesc', ex, ka], ['demote', vi], ['gcdM', dz]),
		gl('∧', ['and', dy, ex, vi, dz, n2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['lcm', dy, ex, vi, dz, n2, gn, i2, ng, co], ['sortAsc', ex, ka], ['promote', vi], ['lcmM', dz]),
		gl('^', ['and', a2]),
		gl('⍱', ['nor', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['notAllEqualToType', ex], ['none', dz]),
		gl('⍲', ['nand', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['notAnyEqualToType', ex], ['notAll', dz]),
		gl('↑', ['mix', dy, ex, vi, dz, ng, al, co], ['take', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['first', n2, a2, gn, i2, ax, ka, aw]),
		gl('↓', ['split', dy, ex, vi, dz, ng, al, co], ['drop', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['dropFirst', ka]),
		gl('⊂', ['enclose', dy, ex, vi, dz, n2, a2, gn, i2, ax, ng, ka, aw, al, co], ['penclose', dy, ex, vi, dz, ng, al, co], ['partition', n2, a2, ax, ka, aw]),
		gl('⊃', ['first', dy, ex, vi, dz, ng, al, co], ['pick', dy, ex, vi, dz, n2, a2, gn, i2, ax, ng, ka, aw, al, co], ['mix', n2, a2, gn, i2, ax, ka, aw]),
		gl('⊆', ['nest', dy, ex, vi, al, co], ['partition', dy, ex, vi, al, co], ['subset', n2], ['penclose', ka]),
		gl('⊇', ['discloseIfScalar', ex], ['from', ex, vi, dz, ka], ['last', vi], ['superset', n2]),
		gl('⌷', ['index', dy, ex, vi, dz, n2, a2, gn, ax, ng, ka, aw, al, co], ['materialize', dy, ex, vi, co], ['mapKV', dz]),
		gl('⍋', ['gradeUp', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['gradeUpD', dy, ex, vi, n2, a2, gn, i2, ax, ng, aw, al, co]),
		gl('⍒', ['gradeDown', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['gradeDownD', dy, ex, vi, n2, a2, gn, i2, ax, ng, aw, al, co]),
		gl('⍳', ['indexGeneratorR', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, th, sv, al, co], ['indexGeneratorI', dy, ex, vi, dz, n2, gn, i2, ng, al, co], ['indexOf', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, th, sv, al, co]),
		gl('⍸', ['where', dy, ex, vi, dz, n2, al, co], ['intervalIndex', dy, ex, vi, al, co], ['arrayLookup', n2]),
		gl('∊', ['elementOf', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['enlist', dy, ex, vi, dz, n2, a2, gn, i2, ax, ng, aw, al, co]),
		gl('⍷', ['find', dy, ex, vi, dz, n2, a2, ax, ng, ka, aw, al, co], ['type', ex, vi]),
		gl('∪', ['union', dy, ex, vi, dz, n2, ax, ng, ka, al, co], ['nub', dy, ex, vi, dz, n2, a2, ax, ng, aw, al, co]),
		gl('∩', ['intersection', dy, ex, vi, dz, n2, ax, ng, ka, al, co], ['nubIn', ex]),
		gl('~', ['not', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['without', dy, ex, vi, dz, n2, a2, gn, i2, ax, ng, ka, al, co], ['m1', ex]),
		gl('§', ['symDiff', n2]),
		gl('/', ['reduce', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['wreduce', dy, ex, vi, dz, n2, a2, gn, i2, ax, ng, ka, al, co], ['compress', dy, ex, vi, n2, gn, i1, i2, ng, th, sv, al, co], ['replicate', dy, ex, vi, n2, gn, i2, ng, al, co], ['compressO', a2, ax, aw], ['replicateO', a2, ax, aw]),
		gl('⌿', ['reduceF', dy, ex, vi, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['wreduceF', dy, ex, vi, n2, a2, gn, i2, ax, ng, ka, al, co], ['compressF', dy, ex, vi, dz, n2, gn, i1, i2, ng, th, sv, al, co], ['replicateF', dy, ex, vi, dz, n2, gn, i2, ng, al, co], ['compressOF', a2, ax, aw], ['replicateOF', a2, ax, aw]),
		gl('\\', ['scan', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, sv, al, co], ['expand', dy, ex, vi, dz, n2, gn, i1, i2, th, sv, al, co], ['outerProduct', ex], ['expandO', a2, ax, aw]),
		gl('⍀', ['scanF', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, sv, al, co], ['expandF', dy, ex, vi, dz, n2, gn, i1, i2, th, sv, al, co], ['applyRight', ex], ['expandOF', a2, ax, aw]),
		gl(',', ['ravel', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['cat', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co]),
		gl('⍪', ['table', dy, ex, vi, dz, n2, gn, i2, ng, ka, al, co], ['catF', dy, ex, vi, dz, n2, gn, i2, ax, ng, ka, aw, al, co], ['ravel', ax]),
		gl('⍴', ['shape', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, th, sv, al, co], ['reshape', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, th, sv, al, co]),
		gl('⌽', ['reverse', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['rotate', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co]),
		gl('⊖', ['reverseF', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['rotateF', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co]),
		gl('⍉', ['transpose', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['transposeD', dy, ex, vi, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co]),
		gl('¨', ['each1', dy, ex, vi, dz, n2, a2, gn, i2, ax, ng, ka, al, co], ['each2', dy, ex, vi, dz, n2, a2, gn, i2, ax, ng, ka, al, co]),
		gl('⍨', ['constant', dy, ex, vi, dz, al, co], ['commute', dy, ex, vi, dz, n2, gn, i2, ng, ka, aw, al, co], ['duplicate', dy, ex, vi, dz, n2, gn, i2, ng, ka, al, co]),
		gl('⍣', ['repeat', dy, ex, vi, dz, n2, ng, ka, al, co], ['until', dy, ex, vi, dz, n2, ng, ka, al, co]),
		gl('⍡', ['cumulativeRepeat', dz], ['convolution', n2]),
		gl('.', ['innerProduct', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['alternant', n2], ['member', dy, ex, vi, dz, gn, aw, co], ['decimal', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, co]),
		gl('∙', ['innerProduct', ex], ['alternant', ex]),
		gl('∘.', ['outerProduct', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, th, sv, al, co]),
		gl('∘', ['compose', dy, ex, vi, dz, n2, ng, al, co], ['after', dy, ex, vi, dz, n2, ng, ka, al, co], ['bind', dy, ex, vi, dz, n2, ng, al, co], ['matrixProduct', gn], ['withe', ka]),
		gl('⍛', ['before', ex, vi, dz, ka, al]),
		gl('⍤', ['compose', dy, ex, vi, dz, n2, al, co], ['atop', dy, ex, vi, dz, n2, al, co], ['atRank', dy, ex, vi, n2, gn, i2, ka, al, co]),
		gl('⍥', ['compose', dy, ex, vi, dz, n2, ka, al, co], ['over', dy, ex, vi, dz, n2, ka, al, co], ['atDepth', ex, vi]),
		gl('⍢', ['under', ex, vi, dz, ka]),
		gl('ᐵ', ['eachLeft', dz]),
		gl('ᑈ', ['eachRight', dz]),
		gl('@', ['at', dy, ex, vi, dz, al, co], ['oneChar', ka]),
		gl('⍫', ['obverse', ex, vi, dz], ['lock', a2, ax], ['return', ng]),
		gl('⎕', ['evalInput', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, th, sv, al, co], ['stdout', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, th, sv, al, co], ['sys', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, sv, al, co]),
		gl('⍞', ['stringInput', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, th, sv, al, co], ['stderr', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, aw, th, sv, al, co], ['applyFnRef', ka]),
		gl('⍠', ['variant', dy, ex, vi, n2], ['valences', ng]),
		gl('⌸', ['keyI', dy, ex, vi, dz, ng, al, co], ['keyV', dy, ex, vi, dz, ng, al, co], ['keyVocI', vi], ['keyVocV', vi], ['getMap', dz], ['setMap', dz], ['keyF', ka]),
		gl('⍁', ['diagonals', dz], ['idElem', ng]),
		gl('⌺', ['stencil', dy, ex, vi, al, co]),
		gl('⌶', ['beam', dy, ex, vi, co]),
		gl('⍎', ['execute', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, sv, al]),
		gl('⍕', ['format', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, sv, al], ['dformat', dy, ex, vi, n2, a2, gn, i1, i2, ax, aw, sv, al], ['formatByExample', a2, ax]),
		gl('⍬', ['zilde', dy, ex, vi, dz, n2, ax, ng, aw, al, co]),
		gl('∞', ['inf', ex, dz, n2, ng]),
		gl('¯∞', ['ninf', ex, dz, n2, ng]),
		gl('∅', ['nan', n2]),
		gl('#', ['rootNs', dy, ex, vi, co]),
		gl('##', ['parentNs', dy, ex, vi, co]),
		gl('⌾', ['cartD', ex], ['cartM', ex], ['outerProduct', dz]),
		gl('$', ['mstringE', ex, vi], ['dstringE', ex, vi], ['hex', gn], ['conditional', al]),
		gl('…', ['range', ex, dz]),
		gl('..', ['range', n2]),
		gl('⍦', ['multisets', n2]),
		gl('⍧', ['nubSieve', ex, dz], ['countIn', ex, dz]),
		gl('%', ['probab', ex], ['merge', dz, ka]),
		gl('⍮', ['pair', ex, dz], ['halfPair', ex, dz]),
		gl('⍭', ['factors', ex], ['primeRelated', ex]),
		gl('π', ['primeFactors', n2], ['primeRelated', n2]),
		gl('⊙', ['null', n2]),
		gl('‼', ['combinatorial', n2]),
		gl('⌻', ['matrix', n2], ['outerProduct', ka]),
		gl('∂', ['deriv', n2]),
		gl('∫', ['integ', n2]),
		gl('⍑', ['transform', n2]),
		gl('&', ['spawn', dy, ex, vi]),
		gl('⊤∧', ['bitAnd', gn], ['bitAnd0', gn]),
		gl('⊤∨', ['bitOr', gn], ['bitOr0', gn]),
		gl('⊤⍲', ['bitNand', gn]),
		gl('⊤⍱', ['bitNor', gn], ['bitNor0', gn]),
		gl('⊤≠', ['bitXor', gn]),
		gl('⊤=', ['bitXnor', gn]),
		gl('⍇', ['fileRead', ax], ['fileInfo', ax], ['fileRename', ax]),
		gl('⍈', ['fileWrite', ax]),
		gl('⍐', ['fileSetAllocation', ax], ['fileHold', ax]),
		gl('⍗', ['fileDelete', ax], ['fileDeleteC', ax]),
		gl('≈', ['approxEq', ng]),
		gl('↗', ['raise', ng]),
		gl('⫽', ['compress', ka], ['replicate', ka]),
		gl('∵', ['bitwise', ka]),
		gl('∥', ['parallel', ka]),
		gl('˝', ['inverseF', ka]),
		gl('{}', ['dfn', dy, ex, vi, dz, n2, gn, ng, ka, al, co], ['dop', dy, ex, vi, dz, n2, gn, ng, al, co], ['dhyp', n2], ['shyRes', dy, ex, vi, n2, a2, gn, co], ['optLeft', dy, ex, vi, co]),
		gl('⍺', ['larg', dy, ex, vi, dz, n2, gn, ng, ka, al, co], ['pictureFormat', ax]),
		gl('⍵', ['rarg', dy, ex, vi, dz, n2, gn, ng, ka, al, co]),
		gl('⍺⍺', ['lop', dy, ex, vi, n2, al, co]),
		gl('⍶', ['lop', dz, gn, ng]),
		gl('⍵⍵', ['rop', dy, ex, vi, n2, al, co]),
		gl('⍹', ['rop', dz, gn, ng]),
		gl('⍺⍺⍺', ['lhyp', n2]),
		gl('⍵⍵⍵', ['rhyp', n2]),
		gl('χ', ['axisArg', n2, gn]),
		gl(':', ['guard', dy, ex, vi, dz, n2, co], ['control', dy, ex, vi, n2, aw], ['label', dy, ex, vi, gn, i2, aw, co]),
		gl('::', ['errorGuard', dy, ex, vi]),
		gl('[]', ['bindex', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, aw, th, sv, al, co], ['axis', dy, ex, vi, n2, a2, gn, i1, i2, ax, aw, th, sv, al, co]),
		gl(';', ['semi', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, aw, th, sv, al, co], ['localVar', dy, ex, vi, n2, a2, gn, i1, i2, ax, aw, th, sv], ['tuple', ka], ['adjacent', th, sv]),
		gl('←', ['assign', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['return', dz], ['sink', n2, aw]),
		gl('⇐', ['assignFn', ka]),
		gl('→', ['branch', dy, ex, vi, n2, a2, gn, i2, ax, aw, al], ['return', ka]),
		gl('∇', ['tradfn', dy, ex, vi, n2, a2, gn, i1, i2, ax, aw, th, sv], ['recfn', dy, ex, vi, dz, n2, ng, al, co], ['globalFn', ka]),
		gl('∇∇', ['recop', dy, ex, vi, n2, co]),
		gl('∇∇∇', ['rechyp', n2]),
		gl('¯', ['negative', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co], ['inverse', ex]),
		gl('⌂', ['dfns', ex]),
		gl('E', ['eS', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, co]),
		gl('e', ['eS', dy, ex, vi, dz, n2, ng, ka, co]),
		gl('J', ['jS', dy, ex, vi, n2, a2, gn, i2, ng, ka, co]),
		gl('j', ['jS', dy, ex, vi, ng, ka, co]),
		gl('i', ['jS', n2]),
		gl('D', ['adS', a2]),
		gl('R', ['arS', a2]),
		gl('ad', ['adS', n2]),
		gl('ah', ['ahS', n2]),
		gl('ar', ['arS', n2]),
		gl('au', ['auS', n2]),
		gl('b', ['bS', n2]),
		gl('g', ['gS', n2]),
		gl('p', ['pS', n2]),
		gl('r', ['rS', n2, al]),
		gl('v', ['vS', n2]),
		gl('x', ['xS', n2]),
		gl('z', ['zS', n2]),
		gl('±', ['ball', n2]),
		gl('ijk', ['ijkS', n2]),
		gl('ijkl', ['ijklS', n2]),
		gl('0x', ['hex', ka, aw]),
		gl('0X', ['hex', aw]),
		gl('0b', ['bin', aw]),
		gl('0B', ['bin', aw]),
		gl('0r', ['ieeeFloat', aw]),
		gl('0R', ['ieeeFloat', aw]),
		gl('⋄', ['sep', dy, ex, vi, dz, n2, a2, gn, i2, ax, ng, aw, al, co]),
		gl('⍝', ['comment', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, ng, ka, aw, th, sv, al, co]),
		gl('\'', ['char', dy, ex, vi, dz, n2, a2, gn, i1, i2, ax, aw, th, sv, al, co]),
		gl('"', ['str', dz, gn, ka], ['char', ax, aw]),
		gl('λ', ['createFnRef', ka]),
		gl('«»', ['fork', ka]),
		gl('_', ['digSep']),
	],
};
