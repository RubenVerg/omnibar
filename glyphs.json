{
  "dialects": {
    "dy": {
      "name": "Dyalog APL",
      "shortName": "Dy"
    },
    "ex": {
      "name": "Extended Dyalog APL",
      "shortName": "ExD"
    },
    "vi": {
      "name": "Dyalog APL Vision",
      "shortName": "DVi"
    },
    "dz": {
      "name": "dzaima/APL",
      "shortName": "dz"
    },
    "n2": {
      "name": "NARS2000",
      "shortName": "N2k"
    },
    "a2": {
      "name": "APL2",
      "shortName": "A2"
    },
    "gn": {
      "name": "GNU APL",
      "shortName": "GNU"
    },
    "i1": {
      "name": "ISO 8485:1989",
      "shortName": "'89"
    },
    "i2": {
      "name": "ISO/IEC 13751:2001",
      "shortName": "'01"
    },
    "ax": {
      "name": "APLX",
      "shortName": "AX"
    },
    "ng": {
      "name": "ngn/apl",
      "shortName": "ngn"
    },
    "ka": {
      "name": "Kap",
      "shortName": "Kap"
    }
  },
  "urls": {
    "wiki": {
      "name": "APL Wiki"
    },
    "dyalog": {
      "name": "Dyalog Reference"
    },
    "nars2000": {
      "name": "NARS2000 Wiki"
    },
    "gnu": {
      "name": "GNU APL Documentation"
    },
    "paper": {
      "name": "Paper"
    },
    "gh": {
      "name": "GitHub"
    },
    "wikipedia": {
      "name": "Wikipedia"
    },
    "aplx": {
      "name": "APLX Reference"
    },
    "kap": {
      "name": "Kap Reference"
    }
  },
  "meanings": {
    "conj": {
      "name": "Conjugate",
      "patterns": [
        "My"
      ],
      "description": "(Hyper)complex conjugate",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Conjugate"
      }
    },
    "add": {
      "name": "Addition",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Add"
      }
    },
    "plusId": {
      "name": "Identity",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Conjugate"
      }
    },
    "neg": {
      "name": "Negate",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Negate"
      }
    },
    "sub": {
      "name": "Subtraction",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Subtract"
      }
    },
    "flipLetterCase": {
      "name": "Flip Letter Case",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-minus"
      }
    },
    "sign": {
      "name": "Signum",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Signum"
      }
    },
    "dir": {
      "name": "Direction",
      "patterns": [
        "My"
      ],
      "description": "Complex signum",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Signum"
      }
    },
    "mul": {
      "name": "Multiplication",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Times"
      }
    },
    "queryLetterCase": {
      "name": "Query Letter Case",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-times"
      }
    },
    "setLetterCase": {
      "name": "Set Letter Case",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-times"
      }
    },
    "rec": {
      "name": "Reciprocal",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Reciprocal"
      }
    },
    "div": {
      "name": "Division",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Divide"
      }
    },
    "toTitleCase": {
      "name": "To Title Case",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-divide"
      }
    },
    "exp": {
      "name": "Exponential",
      "patterns": [
        "My"
      ],
      "description": "Power with Euler's number as the base",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Exponential"
      }
    },
    "pow": {
      "name": "Power",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Power_(function)"
      }
    },
    "sqrt": {
      "name": "Square Root",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Square_Root"
      }
    },
    "root": {
      "name": "Root",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Root"
      }
    },
    "ln": {
      "name": "Natural Logarithm",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Natural_Logarithm"
      }
    },
    "log": {
      "name": "Logarithm",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Logarithm"
      }
    },
    "mInv": {
      "name": "Matrix Inverse",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Matrix_Inverse"
      }
    },
    "mDiv": {
      "name": "Matrix Division",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Matrix_Divide"
      }
    },
    "piT": {
      "name": "Pi Times",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Pi_Times"
      }
    },
    "circ": {
      "name": "Circular Functions",
      "patterns": [
        "xDy"
      ],
      "description": "A range of trigonometric and related functions selected using the left argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Circular"
      }
    },
    "fact": {
      "name": "Factorial",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Factorial"
      }
    },
    "binom": {
      "name": "Binomial Coefficient",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Binomial"
      }
    },
    "roll": {
      "name": "Roll",
      "patterns": [
        "My"
      ],
      "description": "Random numbers as specified by the argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Roll"
      }
    },
    "deal": {
      "name": "Deal",
      "patterns": [
        "xDy"
      ],
      "description": "Right argument random selections from the range defined by the left argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Deal"
      }
    },
    "abs": {
      "name": "Absolute Value",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Magnitude"
      }
    },
    "mag": {
      "name": "Magnitude",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Magnitude"
      }
    },
    "mod": {
      "name": "Residue",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Residue"
      }
    },
    "caseFold": {
      "name": "Case Fold",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-stile"
      }
    },
    "ceil": {
      "name": "Ceiling",
      "patterns": [
        "My"
      ],
      "description": "The smallest integer greater than or equal to the argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Ceiling"
      }
    },
    "max": {
      "name": "Maximum",
      "patterns": [
        "xDy"
      ],
      "description": "The largest argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Maximum"
      }
    },
    "toUpper": {
      "name": "To Uppercase",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-upstile"
      }
    },
    "floor": {
      "name": "Floor",
      "patterns": [
        "My"
      ],
      "description": "The largest integer less than or equal to the argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Floor"
      }
    },
    "min": {
      "name": "Minimum",
      "patterns": [
        "xDy"
      ],
      "description": "The smallest argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Minimum"
      }
    },
    "toLower": {
      "name": "To Lowercase",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-downstile"
      }
    },
    "decode": {
      "name": "Decode",
      "patterns": [
        "xDy"
      ],
      "description": "Evaluate the right argument in the base defined by the left argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Decode"
      }
    },
    "decode2": {
      "name": "Base-2 Decode",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-uptack"
      }
    },
    "encode": {
      "name": "Encode",
      "patterns": [
        "xDy"
      ],
      "description": "Represent the right argument in the base defined by the left argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Encode"
      }
    },
    "encode2": {
      "name": "Base-2 Encode",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-downtack"
      }
    },
    "type": {
      "name": "Type",
      "patterns": [
        "My"
      ],
      "description": "Prototype array corresponding to the argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Type"
      }
    },
    "same": {
      "name": "Same",
      "patterns": [
        "My"
      ],
      "description": "The argument, unchanged",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Identity"
      }
    },
    "right": {
      "name": "Right",
      "patterns": [
        "xDy"
      ],
      "description": "The right argument, unchanged",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Identity"
      }
    },
    "left": {
      "name": "Left",
      "patterns": [
        "xDy"
      ],
      "description": "The left argument, unchanged",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Identity"
      }
    },
    "eq": {
      "name": "Equal To",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Equal_to"
      }
    },
    "isType": {
      "name": "Is Type?",
      "patterns": [
        "My"
      ],
      "description": "Equal to type",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-equals"
      }
    },
    "dimension": {
      "name": "Dimension",
      "patterns": [
        "My"
      ],
      "description": "Hypercomplex dimension (1, 2, 4, or 8)",
      "category": "m",
      "urls": {}
    },
    "neq": {
      "name": "Not Equal To",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Not_Equal_to"
      }
    },
    "nubSieve": {
      "name": "Nub Sieve",
      "patterns": [
        "My"
      ],
      "description": "Mask that marks the first occurrence of each element",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Nub_Sieve"
      }
    },
    "isNotType": {
      "name": "Is Not Type?",
      "patterns": [
        "My"
      ],
      "description": "Not equal to type",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-notequalto"
      }
    },
    "norm": {
      "name": "Norm",
      "patterns": [
        "My"
      ],
      "description": "Argument times the conjugate of the argument",
      "category": "m",
      "urls": {}
    },
    "leq": {
      "name": "Less Than or Equal To",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Less_than_or_Equal_to"
      }
    },
    "isNonneg": {
      "name": "Is Nonnegative?",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-lessthanorequalto"
      }
    },
    "isInvisible": {
      "name": "Is Invisible Character?",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-lessthanorequalto"
      }
    },
    "sortAsc": {
      "name": "Sort Ascending",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-wedge"
      }
    },
    "le": {
      "name": "Less Than",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Less_than"
      }
    },
    "isPos": {
      "name": "Is Positive?",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-lessthan"
      }
    },
    "isControl": {
      "name": "Is Control Character?",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-lessthan"
      }
    },
    "majorCells": {
      "name": "Major Cells",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Major_cell "
      }
    },
    "condense": {
      "name": "Condense",
      "patterns": [
        "My"
      ],
      "description": "Compress a real array into an array of hypercomplex numbers",
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Condense"
      }
    },
    "ge": {
      "name": "Greater Than",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Greater_than"
      }
    },
    "isNeg": {
      "name": "Is Negative?",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-greaterthan"
      }
    },
    "isVisible": {
      "name": "Is Visible Character?",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-greaterthan"
      }
    },
    "join": {
      "name": "Join",
      "patterns": [
        "My"
      ],
      "description": "Merge array of arrays into single array",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Raze"
      }
    },
    "dilate": {
      "name": "Dilate",
      "patterns": [
        "My"
      ],
      "description": "Expand an array of hypercomplex numbers into an array of reals",
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Dilate"
      }
    },
    "geq": {
      "name": "Greater Than or Equal To",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Greater_than_or_Equal_to"
      }
    },
    "isNonpos": {
      "name": "Is Nonpositive?",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-greaterthanorequalto"
      }
    },
    "isNotControl": {
      "name": "Is Not Control Character?",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-greaterthanorequalto"
      }
    },
    "sortDesc": {
      "name": "Sort Descending",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-vel"
      }
    },
    "match": {
      "name": "Match",
      "patterns": [
        "xDy"
      ],
      "description": "Compare the whole arrays for equality",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Match"
      }
    },
    "depth": {
      "name": "Depth",
      "patterns": [
        "My"
      ],
      "description": "Level of nesting",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Depth"
      }
    },
    "mismatch": {
      "name": "Not Match",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Not_Match"
      }
    },
    "tally": {
      "name": "Tally",
      "patterns": [
        "My"
      ],
      "description": "The amount of major cells",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Tally"
      }
    },
    "or": {
      "name": "Or",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Or"
      }
    },
    "gcd": {
      "name": "Greatest Common Divisor",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/GCD"
      }
    },
    "demote": {
      "name": "Demote",
      "patterns": [
        "My"
      ],
      "description": "Combine two leading axes (like ,[⍳2])",
      "category": "m",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_greater_thandecrease_rank"
      }
    },
    "gcdM": {
      "name": "Monadic GCD",
      "patterns": [
        "My"
      ],
      "description": "GCD reduction (any 1?)",
      "category": "m",
      "urls": {
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L13"
      }
    },
    "and": {
      "name": "And",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/And"
      }
    },
    "lcm": {
      "name": "Least Common Multiple",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/LCM"
      }
    },
    "promote": {
      "name": "Promote",
      "patterns": [
        "My"
      ],
      "description": "Add a length-1 axis before the other axes",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Promote"
      }
    },
    "lcmM": {
      "name": "Monadic LCM",
      "patterns": [
        "My"
      ],
      "description": "LCM reduction (all 1?)",
      "category": "m",
      "urls": {
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L14"
      }
    },
    "nor": {
      "name": "Nor",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Nor"
      }
    },
    "notAnyEqualToType": {
      "name": "Not Any Equal To Type",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-nand"
      }
    },
    "notAll": {
      "name": "Not All",
      "patterns": [
        "My"
      ],
      "description": "Any 0?",
      "category": "m",
      "urls": {
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L15"
      }
    },
    "nand": {
      "name": "Nand",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Nand"
      }
    },
    "notAllEqualToType": {
      "name": "Not All Equal To Type",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-nor"
      }
    },
    "none": {
      "name": "None",
      "patterns": [
        "My"
      ],
      "description": "All 0?",
      "category": "m",
      "urls": {
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L16"
      }
    },
    "mix": {
      "name": "Mix",
      "patterns": [
        "My"
      ],
      "description": "Combine all elements into a single array",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Mix"
      }
    },
    "take": {
      "name": "Take",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Take"
      }
    },
    "split": {
      "name": "Split",
      "patterns": [
        "My"
      ],
      "description": "Convert an axis to a level of nesting",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Split"
      }
    },
    "drop": {
      "name": "Drop",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Drop"
      }
    },
    "enclose": {
      "name": "Enclose",
      "patterns": [
        "My"
      ],
      "description": "Wrap the argument into a nested scalar",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Enclose"
      }
    },
    "penclose": {
      "name": "Partitioned Enclose",
      "patterns": [
        "xDy"
      ],
      "description": "Split the right argument into pieces specified by the left argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Partitioned_Enclose"
      }
    },
    "partition": {
      "name": "Partition",
      "patterns": [
        "xDy"
      ],
      "description": "Split the right argument into pieces specified by the left argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Partition"
      }
    },
    "first": {
      "name": "First",
      "patterns": [
        "My"
      ],
      "description": "The first element of the argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/First"
      }
    },
    "pick": {
      "name": "Pick",
      "patterns": [
        "xDy"
      ],
      "description": "Extract a value through layers of nesting",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Pick"
      }
    },
    "nest": {
      "name": "Nest",
      "patterns": [
        "My"
      ],
      "description": "Enclose if simple",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Nest"
      }
    },
    "subset": {
      "name": "Subset",
      "patterns": [
        "xDy"
      ],
      "description": "Is subset?",
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Sets"
      }
    },
    "discloseIfScalar": {
      "name": "Disclose If Scalar",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-rightshoeunderbar"
      }
    },
    "from": {
      "name": "From",
      "patterns": [
        "xDy"
      ],
      "description": "Function form of bracket indexing",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/From"
      }
    },
    "last": {
      "name": "Last",
      "patterns": [
        "My"
      ],
      "description": "Last element in ravel order",
      "category": "m",
      "urls": {}
    },
    "superset": {
      "name": "Superset",
      "patterns": [
        "xDy"
      ],
      "description": "Is superset?",
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Sets"
      }
    },
    "index": {
      "name": "Index",
      "patterns": [
        "xDy"
      ],
      "description": "Items of the right argument as specified by the left argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Index_(function)"
      }
    },
    "materialize": {
      "name": "Materialize",
      "patterns": [
        "My"
      ],
      "description": "Cast the argument to an array",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Materialise"
      }
    },
    "mapKV": {
      "name": "Map Key/Value Pairs",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L25"
      }
    },
    "gradeUp": {
      "name": "Grade Up",
      "patterns": [
        "My"
      ],
      "description": "Indices that sort the argument in ascending order",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Grade"
      }
    },
    "gradeDown": {
      "name": "Grade Down",
      "patterns": [
        "My"
      ],
      "description": "Indices that sort the argument in descending order",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Grade"
      }
    },
    "gradeUpD": {
      "name": "Dyadic Grade Up",
      "patterns": [
        "xDy"
      ],
      "description": "Indices that sort the right argument in ascending order, according to the left argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Grade"
      }
    },
    "gradeDownD": {
      "name": "Dyadic Grade Up",
      "patterns": [
        "xDy"
      ],
      "description": "Indices that sort the right argument in descending order, according to the left argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Grade"
      }
    },
    "indexGeneratorR": {
      "name": "Index Generator (Range)",
      "patterns": [
        "My"
      ],
      "description": "Numbers in range defined by the argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Index_Generator"
      }
    },
    "indexGeneratorI": {
      "name": "Index Generator (Indices)",
      "patterns": [
        "My"
      ],
      "description": "Indices with shape specified by the argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Index_Generator"
      }
    },
    "indexOf": {
      "name": "Index Of",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Index_Of"
      }
    },
    "where": {
      "name": "Where",
      "patterns": [
        "My"
      ],
      "description": "True indices in the argument mask",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Indices"
      }
    },
    "intervalIndex": {
      "name": "Interval Index",
      "patterns": [
        "xDy"
      ],
      "description": "Determine fitting interval, left argument giving beginning points",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Interval_Index"
      }
    },
    "arrayLookup": {
      "name": "Array Lookup",
      "patterns": [
        "xDy"
      ],
      "description": "Like ⍳, but on major cells",
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Array_Lookup"
      }
    },
    "elementOf": {
      "name": "Element Of",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Membership"
      }
    },
    "enlist": {
      "name": "Enlist",
      "patterns": [
        "My"
      ],
      "description": "All simple elements of the argument, traversing nested elements",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Enlist"
      }
    },
    "find": {
      "name": "Find",
      "patterns": [
        "xDy"
      ],
      "description": "Mask of the start corners of the appearances of the left argument in the right argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Find"
      }
    },
    "union": {
      "name": "Union",
      "patterns": [
        "xDy"
      ],
      "description": "The left argument catenated with the elements of the right argument that don't appear in the left argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Union"
      }
    },
    "nub": {
      "name": "Unique",
      "patterns": [
        "My"
      ],
      "description": "Unique elements",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Unique"
      }
    },
    "intersection": {
      "name": "Intersection",
      "patterns": [
        "xDy"
      ],
      "description": "All elements of the left argument that appear in the right argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Intersection"
      }
    },
    "nubIn": {
      "name": "Nub in",
      "patterns": [
        "My"
      ],
      "description": "Table of which elements are their unique",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Nub_in"
      }
    },
    "not": {
      "name": "Not",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Not"
      }
    },
    "m1": {
      "name": "1 Minus",
      "patterns": [
        "My"
      ],
      "description": "Like Not but extended to floats [0; 1]",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-tilde "
      }
    },
    "without": {
      "name": "Without",
      "patterns": [
        "xDy"
      ],
      "description": "All elements of the left argument that don't appear in the right argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Without"
      }
    },
    "symDiff": {
      "name": "Symmetric Difference",
      "patterns": [
        "xDy"
      ],
      "description": "Elements that appear in exactly one of the arguments",
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Sets"
      }
    },
    "reduce": {
      "name": "Reduce",
      "patterns": [
        "(dA)y"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Reduce"
      }
    },
    "reduceF": {
      "name": "Reduce First",
      "patterns": [
        "(dA)y"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Reduce"
      }
    },
    "wreduce": {
      "name": "Windowed Reduce",
      "patterns": [
        "x(dA)y"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Windowed_Reduce"
      }
    },
    "wreduceF": {
      "name": "Windowed Reduce First",
      "patterns": [
        "x(dA)y"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Windowed_Reduce"
      }
    },
    "compress": {
      "name": "Compress",
      "patterns": [
        "xDy"
      ],
      "description": "Select elements of the right argument marked by the left argument mask",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Replicate"
      }
    },
    "replicate": {
      "name": "Replicate",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Replicate"
      }
    },
    "compressO": {
      "name": "Compress",
      "patterns": [
        "(uA)y"
      ],
      "description": "Select elements of the argument marked by the operand mask",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Replicate"
      }
    },
    "replicateO": {
      "name": "Replicate",
      "patterns": [
        "(uA)y"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Replicate"
      }
    },
    "compressF": {
      "name": "Compress First",
      "patterns": [
        "xDy"
      ],
      "description": "Select elements of the right argument marked by the left argument mask",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Replicate"
      }
    },
    "replicateF": {
      "name": "Replicate First",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Replicate"
      }
    },
    "compressOF": {
      "name": "Compress First",
      "patterns": [
        "(uA)y"
      ],
      "description": "Select elements of the argument marked by the operand mask",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Replicate"
      }
    },
    "replicateOF": {
      "name": "Replicate First",
      "patterns": [
        "(uA)y"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Replicate"
      }
    },
    "scan": {
      "name": "Scan",
      "patterns": [
        "(dA)y"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Scan"
      }
    },
    "scanF": {
      "name": "Scan First",
      "patterns": [
        "(dA)y"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Scan"
      }
    },
    "expand": {
      "name": "Expand",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Expand"
      }
    },
    "expandF": {
      "name": "Expand First",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Expand"
      }
    },
    "expandO": {
      "name": "Expand",
      "patterns": [
        "(uA)y"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Expand"
      }
    },
    "expandOF": {
      "name": "Expand First",
      "patterns": [
        "(uA)y"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Expand"
      }
    },
    "applyRight": {
      "name": "Apply To Right Argument (?)",
      "patterns": [
        "x(mA)y"
      ],
      "description": "⊢∘f",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-backslashbar"
      }
    },
    "ravel": {
      "name": "Ravel",
      "patterns": [
        "My"
      ],
      "description": "All elements of the argument as a vector",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Ravel"
      }
    },
    "cat": {
      "name": "Catenate",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Catenate"
      }
    },
    "table": {
      "name": "Ravel Items",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Table"
      }
    },
    "catF": {
      "name": "Catenate First",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Catenate"
      }
    },
    "shape": {
      "name": "Shape",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Shape"
      }
    },
    "reshape": {
      "name": "Reshape",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Reshape"
      }
    },
    "reverse": {
      "name": "Reverse",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Reverse"
      }
    },
    "rotate": {
      "name": "Rotate",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Rotate"
      }
    },
    "reverseF": {
      "name": "Reverse First",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Reverse"
      }
    },
    "rotateF": {
      "name": "Rotate First",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Rotate"
      }
    },
    "transpose": {
      "name": "Transpose",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Transpose#Monadic_usage"
      }
    },
    "transposeD": {
      "name": "Dyadic Transpose",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Transpose#Dyadic_usage"
      }
    },
    "each1": {
      "name": "Each",
      "patterns": [
        "(mA)y"
      ],
      "description": "Apply a function to each element of an array",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Each"
      }
    },
    "each2": {
      "name": "Each",
      "patterns": [
        "x(dA)y"
      ],
      "description": "Apply a function to each element of two arrays",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Each"
      }
    },
    "constant": {
      "name": "Constant",
      "patterns": [
        "(uA)y",
        "x(uA)y"
      ],
      "description": "A function that always returns the operand",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Constant"
      }
    },
    "commute": {
      "name": "Commute",
      "patterns": [
        "x(dA)y"
      ],
      "description": "Call the operand with the arguments swapped",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Commute"
      }
    },
    "duplicate": {
      "name": "Duplicate",
      "patterns": [
        "(dA)y"
      ],
      "description": "Call the operand with the argument as both left and right",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Commute"
      }
    },
    "repeat": {
      "name": "Repeat",
      "patterns": [
        "(mCv)y",
        "x(dCv)y"
      ],
      "description": "Repeat a function a specified number of times",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Power_(operator)"
      }
    },
    "until": {
      "name": "Repeat Until",
      "patterns": [
        "(mCe)y",
        "x(dCe)y"
      ],
      "description": "Repeat a function until a predicate is satisfied",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Power_(operator)"
      }
    },
    "cumulativeRepeat": {
      "name": "Cumulative Repeat",
      "patterns": [
        "(mCv)y",
        "x(dCv)y",
        "(mCe)y",
        "x(dCe)y"
      ],
      "description": "Like ⍣, but collect intermediary results",
      "category": "m",
      "urls": {}
    },
    "convolution": {
      "name": "Convolution",
      "patterns": [
        "x(dCe)y"
      ],
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Convolution"
      }
    },
    "innerProduct": {
      "name": "Inner Product",
      "patterns": [
        "x(dCe)y"
      ],
      "description": "Apply a function to each pair in the arguments and combine the results with another function",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Inner_Product"
      }
    },
    "alternant": {
      "name": "Alternant",
      "patterns": [
        "(dCe)y"
      ],
      "description": "Generalized discriminant",
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Determinant_Operator"
      }
    },
    "outerProduct": {
      "name": "Outer Product",
      "patterns": [
        "x(dA)y"
      ],
      "description": "Apply a function to the cartesian product of the two arguments",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Outer_Product"
      }
    },
    "compose": {
      "name": "Compose",
      "patterns": [
        "(mCn)y"
      ],
      "description": "Apply a function after another",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Compose"
      }
    },
    "after": {
      "name": "After",
      "patterns": [
        "x(dCe)y"
      ],
      "description": "Preprocess the right argument to a function with another function",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Beside"
      }
    },
    "bind": {
      "name": "Bind",
      "patterns": [
        "(dCv)y",
        "(uCe)y"
      ],
      "description": "Bind an argument to a dyadic function, making it monadic",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Bind"
      }
    },
    "before": {
      "name": "Before",
      "patterns": [
        "(mCe)y",
        "x(mCe)y"
      ],
      "description": "Preprocess the left argument to a function with another function",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Reverse_Compose"
      }
    },
    "atop": {
      "name": "Atop",
      "patterns": [
        "x(mCe)y"
      ],
      "description": "Call a monad using the result of a dyad as the argument",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Atop_(operator)"
      }
    },
    "atRank": {
      "name": "Rank",
      "patterns": [
        "(mCv)y",
        "x(dCv)y"
      ],
      "description": "Apply a function at a specified rank",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Rank_(operator)"
      }
    },
    "over": {
      "name": "Over",
      "patterns": [
        "x(dCe)y"
      ],
      "description": "Preprocess all arguments to a function with another function",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Over"
      }
    },
    "atDepth": {
      "name": "Depth",
      "patterns": [
        "(mCv)y",
        "x(dCv)y"
      ],
      "description": "Apply a function at a specified depth",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Depth_(operator)"
      }
    },
    "under": {
      "name": "Under",
      "patterns": [
        "(mCn)y",
        "x(dCn)y"
      ],
      "description": "Apply a function, then another function, then the first function's inverse",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Under"
      }
    },
    "eachLeft": {
      "name": "Each Left",
      "patterns": [
        "x(dA)y"
      ],
      "description": "Each, only on the left argument",
      "category": "m",
      "urls": {
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L74"
      }
    },
    "eachRight": {
      "name": "Each Right",
      "patterns": [
        "x(dA)y"
      ],
      "description": "Each, only on the right argument",
      "category": "m",
      "urls": {
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L75"
      }
    },
    "at": {
      "name": "At",
      "patterns": [
        "(mCn)y",
        "(mCv)y",
        "(uCn)y",
        "(uCv)y"
      ],
      "description": "Transform selected elements of an array",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/At"
      }
    },
    "obverse": {
      "name": "Obverse",
      "patterns": [
        "(mCn)y",
        "x(dCe)y"
      ],
      "description": "Specify the inverse function for a function",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-deltilde"
      }
    },
    "evalInput": {
      "name": "Evaluated Input",
      "description": "Input and evaluate as an APL expression",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Quad_name"
      }
    },
    "stdout": {
      "name": "Standard Output",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Quad_name"
      }
    },
    "sys": {
      "name": "System Name",
      "description": "First character of a system name",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Quad_name"
      }
    },
    "stringInput": {
      "name": "String Input",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Quad_name"
      }
    },
    "stderr": {
      "name": "Standard Error",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Quad_name"
      }
    },
    "variant": {
      "name": "Variant",
      "patterns": [
        "(mCv)y",
        "x(dCv)y"
      ],
      "description": "Select a related function",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Variant",
        "dyalog": "https://help.dyalog.com/18.2/Content/Language/Primitive%20Operators/Variant.htm",
        "nars2000": "https://wiki.nars2000.org/index.php?title=Variant"
      }
    },
    "keyI": {
      "name": "Key (Indices)",
      "patterns": [
        "(dA)y"
      ],
      "description": "Apply a function to unique elements of an array and their indices",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Key"
      }
    },
    "keyV": {
      "name": "Key (Values)",
      "patterns": [
        "x(dA)y"
      ],
      "description": "Apply a function to unique elements of the right array and the corresponding entries in the left array",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Key"
      }
    },
    "keyVocI": {
      "name": "Key With Vocabulary (Indices)",
      "patterns": [
        "(uA)y"
      ],
      "description": "Locations of each element in the vocabulary in the argument",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog_vision#user-content-quadequal"
      }
    },
    "keyVocV": {
      "name": "Key With Vocabulary (Values)",
      "patterns": [
        "x(uA)y"
      ],
      "description": "Elements of the left argument corresponding to locations of elements in the vocabulary in the right argument",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog_vision#user-content-quadequal"
      }
    },
    "getMap": {
      "name": "Get In Map",
      "patterns": [
        "(uA)y"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L73"
      }
    },
    "setMap": {
      "name": "Set In Map",
      "patterns": [
        "x(uA)y"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L73"
      }
    },
    "diagonals": {
      "name": "Diagonals",
      "patterns": [
        "(mA)y"
      ],
      "description": "Apply a function to each diagonal of a matrix",
      "category": "m",
      "urls": {
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L89"
      }
    },
    "stencil": {
      "name": "Stencil",
      "patterns": [
        "(dCv)y"
      ],
      "description": "Apply a function to windows of an array",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Stencil"
      }
    },
    "beam": {
      "name": "I-Beam",
      "patterns": [
        "(uA)y",
        "x(uA)y"
      ],
      "description": "Access non-primitive, implementation specific functions",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/I-Beam",
        "dyalog": "https://help.dyalog.com/18.2/Content/Language/Primitive%20Operators/I%20Beam.htm"
      }
    },
    "execute": {
      "name": "Execute",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Execute"
      }
    },
    "format": {
      "name": "Format",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Format#Monadic_form"
      }
    },
    "dformat": {
      "name": "Format With Specification",
      "patterns": [
        "xDy"
      ],
      "description": "Format specifying column widths, decimal places and optionally scientific notation",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Format#Dyadic_form"
      }
    },
    "zilde": {
      "name": "Zilde",
      "patterns": [
        "R"
      ],
      "description": "Empty numeric vector",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Zilde"
      }
    },
    "inf": {
      "name": "Infinity",
      "patterns": [
        "R"
      ],
      "description": "The largest number",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-infinity"
      }
    },
    "ninf": {
      "name": "Negative Infinity",
      "patterns": [
        "R"
      ],
      "description": "The smallest number",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-negativeinfinity"
      }
    },
    "nan": {
      "name": "Not a Number",
      "patterns": [
        "R"
      ],
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=NaN"
      }
    },
    "cartM": {
      "name": "Imaginary",
      "patterns": [
        "My"
      ],
      "description": "i × arg",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Imaginary"
      }
    },
    "cartD": {
      "name": "Complex",
      "patterns": [
        "xDy"
      ],
      "description": "left + i × right",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Complex_(function)"
      }
    },
    "mstringE": {
      "name": "String Enhancement (Monadic)",
      "patterns": [
        "My"
      ],
      "description": "${expr} inside a string is evaluated",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-dollarsign"
      }
    },
    "dstringE": {
      "name": "String Enhancement (Dyadic)",
      "patterns": [
        "xDy"
      ],
      "description": "${idx} is replaced with the corresponding item in the argument",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-dollarsign"
      }
    },
    "range": {
      "name": "Range",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Range"
      }
    },
    "multisets": {
      "name": "Multisets",
      "patterns": [
        "(mA)y",
        "x(dA)y"
      ],
      "description": "Turns set functions into multiset functions",
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Multisets"
      }
    },
    "countIn": {
      "name": "Count In",
      "patterns": [
        "xDy"
      ],
      "description": "Count occurrences of each of the left argument in the right argument",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-leftshoestile"
      }
    },
    "probab": {
      "name": "Probability-logical Function",
      "patterns": [
        "x(dA)y"
      ],
      "description": "Multiplicative fuzzy logic (probabalistic) function corresponding to the Boolean function given",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-percent"
      }
    },
    "merge": {
      "name": "Merge",
      "patterns": [
        "xDy"
      ],
      "description": "Compose array by choosing each element from the corresponding element in each of a set of sources",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Case"
      }
    },
    "pair": {
      "name": "Pair",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Pair"
      }
    },
    "halfPair": {
      "name": "Half Pair",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-semicolonunderbar"
      }
    },
    "factors": {
      "name": "Factors",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-stiletilde"
      }
    },
    "primeRelated": {
      "name": "Prime Related Functions",
      "patterns": [
        "xDy"
      ],
      "description": "Prime-related functions on the right argument, selected by left argument",
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/dyalog-apl-extended/tree/master#user-content-stiletilde",
        "nars2000": "https://wiki.nars2000.org/index.php?title=Primes"
      }
    },
    "primeFactors": {
      "name": "Prime Factors",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Primes"
      }
    },
    "null": {
      "name": "Null",
      "patterns": [
        "(mA)y",
        "x(dA)y"
      ],
      "description": "The identity operator, useful for casting hybrids to functions",
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Null"
      }
    },
    "combinatorial": {
      "name": "Combinatorial",
      "patterns": [
        "x(uA)y"
      ],
      "description": "Combinatorial functions selected by the operand",
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Combinatorial"
      }
    },
    "matrix": {
      "name": "Matrix",
      "patterns": [
        "(mA)y",
        "x(dA)y"
      ],
      "description": "Apply a function to a diagonalizable matrix",
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Matrix"
      }
    },
    "deriv": {
      "name": "Derivative",
      "patterns": [
        "(mA)y",
        "x(dA)y"
      ],
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Derivative"
      }
    },
    "integ": {
      "name": "Integral",
      "patterns": [
        "x(mA)y"
      ],
      "category": "m",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Integral"
      }
    },
    "transform": {
      "name": "Transform",
      "patterns": [
        "(d(mH)e)y"
      ],
      "category": "m",
      "urls": {
        "paper": "http://www.sudleyplace.com/APL/A%20Transform%20Hyperator%20in%20APL.pdf"
      }
    },
    "dfn": {
      "name": "Dfn",
      "description": "Wrap a dfn (anonymous function) definition",
      "category": "s",
      "urls": {
        "wikipedia": "https://en.wikipedia.org/wiki/Direct_function"
      }
    },
    "dop": {
      "name": "Dop",
      "description": "Wrap a dop (anonymous operator) definition",
      "category": "s",
      "urls": {
        "wikipedia": "https://en.wikipedia.org/wiki/Direct_function"
      }
    },
    "dhyp": {
      "name": "Dhyp",
      "description": "Wrap a dhyp (anonymous hyperator) definition",
      "category": "s",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Anonymous_Functions/Operators/Hyperators"
      }
    },
    "larg": {
      "name": "Left Argument",
      "category": "s",
      "urls": {
        "wikipedia": "https://en.wikipedia.org/wiki/Direct_function"
      }
    },
    "rarg": {
      "name": "Right Argument",
      "category": "s",
      "urls": {
        "wikipedia": "https://en.wikipedia.org/wiki/Direct_function"
      }
    },
    "lop": {
      "name": "Left Operand",
      "category": "s",
      "urls": {
        "wikipedia": "https://en.wikipedia.org/wiki/Direct_function",
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L98"
      }
    },
    "rop": {
      "name": "Right Operand",
      "category": "s",
      "urls": {
        "wikipedia": "https://en.wikipedia.org/wiki/Direct_function",
        "gh": "https://github.com/dzaima/APL/blob/master/docs/chars.txt#L99"
      }
    },
    "lhyp": {
      "name": "Left Hyperand",
      "category": "s",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Anonymous_Functions/Operators/Hyperators#Hyperator_Hyperands"
      }
    },
    "rhyp": {
      "name": "Right Hyperand",
      "category": "s",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Anonymous_Functions/Operators/Hyperators#Hyperator_Hyperands"
      }
    },
    "axisArg": {
      "name": "Axis Argument",
      "category": "s",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Anonymous_Functions/Operators/Hyperators#Axis_Operator"
      }
    },
    "guard": {
      "name": "Guard",
      "description": "Dfn guard: run RHS if LHS is true",
      "category": "s",
      "urls": {
        "dyalog": "https://help.dyalog.com/latest/#Language/Defined%20Functions%20and%20Operators/DynamicFunctions/Guards.htm"
      }
    },
    "control": {
      "name": "Control Structure",
      "description": "Begin a control structure name",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Control_structure"
      }
    },
    "label": {
      "name": "Label",
      "description": "Target for a branch",
      "category": "s",
      "urls": {
        "dyalog": "https://help.dyalog.com/18.2/Content/Language/Defined%20Functions%20and%20Operators/TradFns/Statements.htm"
      }
    },
    "errorGuard": {
      "name": "Error Guard",
      "description": "If an error of the LHS category occurs, return the RHS",
      "category": "s",
      "urls": {
        "dyalog": "https://help.dyalog.com/latest/#Language/Defined%20Functions%20and%20Operators/DynamicFunctions/Error%20Guards.htm"
      }
    },
    "bindex": {
      "name": "Index",
      "description": "Index into an array",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Indexing"
      }
    },
    "axis": {
      "name": "Function Axis",
      "description": "Specify an axis for a function",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Function_axis"
      }
    },
    "semi": {
      "name": "Axis Separator",
      "description": "Inside a bracket index, separates the different axes",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Indexing"
      }
    },
    "assign": {
      "name": "Assignment",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Assignment"
      }
    },
    "return": {
      "name": "Return",
      "description": "Return early from a dfn",
      "category": "s",
      "urls": {}
    },
    "sink": {
      "name": "Sink",
      "description": "Don't print the result of an expression",
      "category": "s",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Sink"
      }
    },
    "branch": {
      "name": "Branch",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Branch"
      }
    },
    "tradfn": {
      "name": "Tradfn Definition",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Defined_function_(traditional)"
      }
    },
    "recfn": {
      "name": "Recurse Function",
      "description": "In a dfn, refer to the dfn itself",
      "category": "s",
      "urls": {
        "wikipedia": "https://en.wikipedia.org/wiki/Direct_function",
        "dyalog": "https://help.dyalog.com/latest/#Language/Defined%20Functions%20and%20Operators/DynamicFunctions/Recursion.htm"
      }
    },
    "recop": {
      "name": "Recurse Operator",
      "description": "In a dop, refer to the dop itself",
      "category": "s",
      "urls": {
        "wikipedia": "https://en.wikipedia.org/wiki/Direct_function",
        "dyalog": "https://help.dyalog.com/latest/#Language/Defined%20Functions%20and%20Operators/DynamicFunctions/Recursion.htm"
      }
    },
    "rechyp": {
      "name": "Recurse Hyperator",
      "description": "In a dhyp, refer to the dhyp itself",
      "category": "s",
      "urls": {
        "nars2000": "https://wiki.nars2000.org/index.php?title=Anonymous_Functions/Operators/Hyperators#Recursion"
      }
    },
    "negative": {
      "name": "Negative",
      "description": "Mark a number as negative",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/High_minus"
      }
    },
    "inverse": {
      "name": "Inverse",
      "description": "The inverse of a function",
      "category": "s",
      "urls": {}
    },
    "dfns": {
      "name": "Dfns Workspace",
      "description": "First character of a dfns workspace name",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Dfns_workspace"
      }
    },
    "eS": {
      "name": "Exponential Separator",
      "description": "Separates the multiplier and exponent of a number",
      "category": "s",
      "urls": {}
    },
    "jS": {
      "name": "Complex Separator",
      "description": "Separates the real and imaginary part of a complex number",
      "category": "s",
      "urls": {}
    },
    "adS": {
      "name": "Complex Angle Degrees",
      "category": "s",
      "urls": {}
    },
    "ahS": {
      "name": "Complex Angle Signed Half Unit",
      "category": "s",
      "urls": {}
    },
    "arS": {
      "name": "Complex Angle Radians",
      "category": "s",
      "urls": {}
    },
    "auS": {
      "name": "Complex Angle Unsigned Unit",
      "category": "s",
      "urls": {}
    },
    "bS": {
      "name": "Base Point Notation",
      "category": "s",
      "urls": {}
    },
    "gS": {
      "name": "Gamma Point Notation",
      "category": "s",
      "urls": {}
    },
    "pS": {
      "name": "Pi Point Notation",
      "category": "s",
      "urls": {}
    },
    "rS": {
      "name": "Rational Notation",
      "category": "s",
      "urls": {}
    },
    "vS": {
      "name": "Multiprecision Float",
      "category": "s",
      "urls": {}
    },
    "xS": {
      "name": "Euler Point Notation",
      "category": "s",
      "urls": {}
    },
    "zS": {
      "name": "Zeta Point Notation",
      "category": "s",
      "urls": {}
    },
    "ball": {
      "name": "Ball Arithmetic Notation",
      "category": "s",
      "urls": {}
    },
    "ijkS": {
      "name": "Quaternion Notation",
      "category": "s",
      "urls": {}
    },
    "ijklS": {
      "name": "Octonion Notation",
      "category": "s",
      "urls": {}
    },
    "sep": {
      "name": "Statement Separator",
      "category": "s",
      "urls": {}
    },
    "comment": {
      "name": "Comment",
      "description": "Start a comment that ends at the end of the line",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Comment"
      }
    },
    "char": {
      "name": "Character Literal",
      "description": "Character vector/scalar delimiter",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/String"
      }
    },
    "str": {
      "name": "String Literal",
      "description": "Like a character literal, but with escapes and always a vector",
      "category": "s",
      "urls": {}
    },
    "spawn": {
      "name": "Spawn",
      "patterns": [
        "(mA)y",
        "x(dA)y"
      ],
      "description": "Run the operand in a green thread",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Spawn"
      }
    },
    "rootNs": {
      "name": "Root Namespace",
      "patterns": [
        "R"
      ],
      "category": "m",
      "urls": {
        "dyalog": "https://help.dyalog.com/latest/#Language/Introduction/Namespaces/Namespaces.htm"
      }
    },
    "parentNs": {
      "name": "Parent Namespace",
      "patterns": [
        "R"
      ],
      "category": "m",
      "urls": {
        "dyalog": "https://help.dyalog.com/latest/#Language/Introduction/Namespaces/Namespaces.htm"
      }
    },
    "rank": {
      "name": "Rank",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Rank"
      }
    },
    "formatByExample": {
      "name": "Format By Example",
      "patterns": [
        "xDy"
      ],
      "description": "Format the right argument accoding to the left argument \"example\"",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Format#Dyadic_form"
      }
    },
    "hex": {
      "name": "Hexadecimal Number",
      "category": "s",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Section-2_002e14"
      }
    },
    "bitAnd": {
      "name": "Bitwise And",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d"
      }
    },
    "bitOr": {
      "name": "Bitwise Or",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d"
      }
    },
    "bitNand": {
      "name": "Bitwise Nand",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d"
      }
    },
    "bitNor": {
      "name": "Bitwise Nor",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d"
      }
    },
    "bitXor": {
      "name": "Bitwise Xor",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d"
      }
    },
    "bitXnor": {
      "name": "Bitwise Xnor",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Dyadic-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_005b_003f_005d_002c-_005b_003f_005d_003d_002c-and-_005b_003f_005d_005b_003f_005d"
      }
    },
    "bitAnd0": {
      "name": "Bitwise And With 0",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Monadic-_005b_003f_005d_005b_003f_005d"
      }
    },
    "bitOr0": {
      "name": "Bitwise Or With 0",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Monadic-_005b_003f_005d_005b_003f_005d-and-_005b_003f_005d_005b_003f_005d"
      }
    },
    "bitNor0": {
      "name": "Bitwise Nor With 0",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Monadic-_005b_003f_005d_005b_003f_005d-and-_005b_003f_005d_005b_003f_005d"
      }
    },
    "qrFact": {
      "name": "QR Factorization",
      "patterns": [
        "M[v]y"
      ],
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Section-2_002e20"
      }
    },
    "matrixProduct": {
      "name": "Matrix Product",
      "patterns": [
        "xDy"
      ],
      "description": "Like +.× but faster (and only for matrices)",
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Section-2_002e41"
      }
    },
    "conditional": {
      "name": "Conditional",
      "description": "???",
      "category": "s",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Section-2_002e40"
      }
    },
    "sinkF": {
      "name": "Sink",
      "patterns": [
        "My"
      ],
      "description": "Don't print the result of an expression",
      "category": "m",
      "urls": {
        "gnu": "https://www.gnu.org/software/apl/apl.html#Section-2_002e17"
      }
    },
    "localVar": {
      "name": "Local Variable",
      "description": "Mark a variable as local inside a tradfn",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Defined_function_(traditional)#Semi-colons"
      }
    },
    "shyRes": {
      "name": "Shy Result",
      "description": "Indicate that a tradfn result is shy",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Defined_function_(traditional)#Braces"
      }
    },
    "optLeft": {
      "name": "Optional Left Argument",
      "description": "Indicate that a tradfn's left argument is optional",
      "category": "s",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Defined_function_(traditional)#Braces"
      }
    },
    "pictureFormat": {
      "name": "Picture Format",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "aplx": "https://microapl.com/apl_help/ch_020_020_670.htm"
      }
    },
    "fileRead": {
      "name": "Read File",
      "patterns": [
        "My"
      ],
      "description": "Read a component from a file",
      "category": "m",
      "urls": {
        "aplx": "https://microapl.com/apl_help/ch_020_020_720.htm"
      }
    },
    "fileInfo": {
      "name": "File Info",
      "patterns": [
        "xDy"
      ],
      "description": "Read information from a file selected by the left argument",
      "category": "m",
      "urls": {
        "aplx": "https://microapl.com/apl_help/ch_020_020_720.htm"
      }
    },
    "fileRename": {
      "name": "Rename File",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "aplx": "https://microapl.com/apl_help/ch_020_020_720.htm"
      }
    },
    "fileWrite": {
      "name": "Write File",
      "patterns": [
        "xDy"
      ],
      "description": "Write a component to a file",
      "category": "m",
      "urls": {
        "aplx": "https://microapl.com/apl_help/ch_020_020_730.htm"
      }
    },
    "fileSetAllocation": {
      "name": "Set File Allocation Quota",
      "patterns": [
        "My"
      ],
      "description": "Set how much a file can hold",
      "category": "m",
      "urls": {
        "aplx": "https://microapl.com/apl_help/ch_020_020_740.htm"
      }
    },
    "fileHold": {
      "name": "File Hold",
      "patterns": [
        "xDy"
      ],
      "description": "Lock or unlock a file",
      "category": "m",
      "urls": {
        "aplx": "https://microapl.com/apl_help/ch_020_020_740.htm"
      }
    },
    "fileDeleteC": {
      "name": "Delete File Component",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "aplx": "https://microapl.com/apl_help/ch_020_020_750.htm"
      }
    },
    "fileDelete": {
      "name": "Delete File",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "aplx": "https://microapl.com/apl_help/ch_020_020_750.htm"
      }
    },
    "stop": {
      "name": "Stop",
      "patterns": [
        "My"
      ],
      "description": "Return an empty character matrix",
      "category": "m",
      "urls": {
        "aplx": "https://microapl.com/apl_help/ch_020_020_753.htm"
      }
    },
    "lock": {
      "name": "Lock",
      "description": "Lock a function definition, so that it can't be read or modified",
      "category": "s",
      "urls": {
        "aplx": "https://microapl.com/apl_help/ch_020_020_950.htm"
      }
    },
    "approxEq": {
      "name": "Approximately Equal To",
      "patterns": [
        "xDy"
      ],
      "category": "m",
      "urls": {
        "gh": "https://github.com/abrudz/ngn-apl/blob/master/apl.js#L34"
      }
    },
    "valences": {
      "name": "Valences",
      "patterns": [
        "(mCe)y",
        "x(mCe)y"
      ],
      "description": "Apply the left function if called monadically and the right function if called dyadically",
      "category": "m",
      "urls": {}
    },
    "raise": {
      "name": "Raise",
      "patterns": [
        "My"
      ],
      "description": "Raise an exception",
      "category": "m",
      "urls": {}
    },
    "idElem": {
      "name": "Identity Element",
      "patterns": [
        "(dCv)y"
      ],
      "description": "Set the identity element for a function",
      "category": "m",
      "urls": {}
    },
    "oneChar": {
      "name": "Character",
      "description": "A literal for a single scalar character",
      "category": "s",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_character_syntax"
      }
    },
    "tuple": {
      "name": "Tuple",
      "description": "Separates entries in a tuple literal",
      "category": "s",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_n_tuples"
      }
    },
    "globalFn": {
      "name": "Global Function",
      "category": "s",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_function_definition"
      }
    },
    "assignFn": {
      "name": "Assign Function",
      "description": "Bind a function to a name",
      "category": "s",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_local_function_declaration"
      }
    },
    "createFnRef": {
      "name": "Create Function Reference",
      "description": "Turn a function into a primitive",
      "category": "s",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_%CE%BB_create_function_reference"
      }
    },
    "applyFnRef": {
      "name": "Apply Function Reference",
      "description": "Call a function wrapped in a reference",
      "category": "s",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_apply_function_from_function_reference"
      }
    },
    "dropFirst": {
      "name": "Drop First",
      "patterns": [
        "My"
      ],
      "category": "m",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_dropdrop_first"
      }
    },
    "keyF": {
      "name": "Key",
      "patterns": [
        "xDy"
      ],
      "description": "???",
      "category": "m",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_key"
      }
    },
    "bitwise": {
      "name": "Bitwise",
      "patterns": [
        "x(dA)y",
        "(mA)y"
      ],
      "description": "Derive a bitwise function from a boolean function",
      "category": "m",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_derive_bitwise"
      }
    },
    "parallel": {
      "name": "Parallel",
      "patterns": [
        "(mA)y",
        "x(dA)y"
      ],
      "description": "???",
      "category": "m",
      "urls": {}
    },
    "inverseF": {
      "name": "Inverse",
      "patterns": [
        "(mA)y",
        "x(dA)y"
      ],
      "category": "m",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_inverse"
      }
    },
    "withe": {
      "name": "Withe",
      "patterns": [
        "(dCn)y"
      ],
      "description": "Right hook",
      "category": "m",
      "urls": {
        "wiki": "https://aplwiki.com/wiki/Withe"
      }
    },
    "fork": {
      "name": "Fork",
      "category": "s",
      "urls": {
        "kap": "https://kapdemo.dhsdevelopments.com/reference.html#_and_fork"
      }
    }
  },
  "glyphs": [
    {
      "glyph": "+",
      "meanings": [
        [
          "plusId",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "conj",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i2",
            "ng",
            "ka"
          ]
        ],
        [
          "add",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "-",
      "meanings": [
        [
          "neg",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "sub",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "flipLetterCase",
          [
            "ex",
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "×",
      "meanings": [
        [
          "sign",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "dir",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i2",
            "ng",
            "ka"
          ]
        ],
        [
          "mul",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "queryLetterCase",
          [
            "ex",
            "dz"
          ]
        ],
        [
          "setLetterCase",
          [
            "ex"
          ]
        ]
      ]
    },
    {
      "glyph": "÷",
      "meanings": [
        [
          "rec",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "div",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "toTitleCase",
          [
            "ex"
          ]
        ]
      ]
    },
    {
      "glyph": "*",
      "meanings": [
        [
          "exp",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "pow",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "√",
      "meanings": [
        [
          "sqrt",
          [
            "ex",
            "vi",
            "dz",
            "n2",
            "ka"
          ]
        ],
        [
          "root",
          [
            "ex",
            "vi",
            "dz",
            "n2",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍟",
      "meanings": [
        [
          "ln",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "log",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⌹",
      "meanings": [
        [
          "mInv",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "mDiv",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "qrFact",
          [
            "gn"
          ]
        ]
      ]
    },
    {
      "glyph": "○",
      "meanings": [
        [
          "piT",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ],
        [
          "circ",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "!",
      "meanings": [
        [
          "fact",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "binom",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "?",
      "meanings": [
        [
          "roll",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "deal",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "|",
      "meanings": [
        [
          "abs",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "mag",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i2",
            "ng",
            "ka"
          ]
        ],
        [
          "mod",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "caseFold",
          [
            "ex"
          ]
        ]
      ]
    },
    {
      "glyph": "⌈",
      "meanings": [
        [
          "ceil",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "max",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "toUpper",
          [
            "ex",
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "⌊",
      "meanings": [
        [
          "floor",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "min",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "toLower",
          [
            "ex",
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "⊥",
      "meanings": [
        [
          "decode",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "decode2",
          [
            "ex",
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "⊤",
      "meanings": [
        [
          "encode",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "encode2",
          [
            "ex",
            "dz"
          ]
        ],
        [
          "type",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "⊢",
      "meanings": [
        [
          "same",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "right",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⊣",
      "meanings": [
        [
          "same",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ng"
          ]
        ],
        [
          "left",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "sink",
          [
            "gn"
          ]
        ],
        [
          "stop",
          [
            "ax",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "=",
      "meanings": [
        [
          "eq",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "isType",
          [
            "ex"
          ]
        ],
        [
          "rank",
          [
            "vi"
          ]
        ],
        [
          "dimension",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "≠",
      "meanings": [
        [
          "neq",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "nubSieve",
          [
            "dy",
            "vi"
          ]
        ],
        [
          "isNotType",
          [
            "ex"
          ]
        ],
        [
          "norm",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "≤",
      "meanings": [
        [
          "leq",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "isNonneg",
          [
            "ex"
          ]
        ],
        [
          "isInvisible",
          [
            "ex"
          ]
        ],
        [
          "sortAsc",
          [
            "vi"
          ]
        ]
      ]
    },
    {
      "glyph": "<",
      "meanings": [
        [
          "le",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "isPos",
          [
            "ex"
          ]
        ],
        [
          "isControl",
          [
            "ex"
          ]
        ],
        [
          "majorCells",
          [
            "vi"
          ]
        ],
        [
          "sortAsc",
          [
            "dz"
          ]
        ],
        [
          "condense",
          [
            "n2"
          ]
        ],
        [
          "promote",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": ">",
      "meanings": [
        [
          "ge",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "isNeg",
          [
            "ex"
          ]
        ],
        [
          "isVisible",
          [
            "ex"
          ]
        ],
        [
          "join",
          [
            "vi"
          ]
        ],
        [
          "sortDesc",
          [
            "dz"
          ]
        ],
        [
          "dilate",
          [
            "n2"
          ]
        ],
        [
          "demote",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "≥",
      "meanings": [
        [
          "geq",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "isNonpos",
          [
            "ex"
          ]
        ],
        [
          "isNotControl",
          [
            "ex"
          ]
        ],
        [
          "sortDesc",
          [
            "vi"
          ]
        ]
      ]
    },
    {
      "glyph": "≡",
      "meanings": [
        [
          "match",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "depth",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "≢",
      "meanings": [
        [
          "mismatch",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "tally",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "∨",
      "meanings": [
        [
          "or",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "gcd",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i2",
            "ng"
          ]
        ],
        [
          "sortDesc",
          [
            "ex",
            "ka"
          ]
        ],
        [
          "demote",
          [
            "vi"
          ]
        ],
        [
          "gcdM",
          [
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "∧",
      "meanings": [
        [
          "and",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "lcm",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i2",
            "ng"
          ]
        ],
        [
          "sortAsc",
          [
            "ex",
            "ka"
          ]
        ],
        [
          "promote",
          [
            "vi"
          ]
        ],
        [
          "lcmM",
          [
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "^",
      "meanings": [
        [
          "and",
          [
            "a2"
          ]
        ]
      ]
    },
    {
      "glyph": "⍱",
      "meanings": [
        [
          "nor",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "notAllEqualToType",
          [
            "ex"
          ]
        ],
        [
          "none",
          [
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "⍲",
      "meanings": [
        [
          "nand",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "notAnyEqualToType",
          [
            "ex"
          ]
        ],
        [
          "notAll",
          [
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "↑",
      "meanings": [
        [
          "mix",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "ng"
          ]
        ],
        [
          "take",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "first",
          [
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "↓",
      "meanings": [
        [
          "split",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "ng"
          ]
        ],
        [
          "drop",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "dropFirst",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⊂",
      "meanings": [
        [
          "enclose",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "penclose",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "ng"
          ]
        ],
        [
          "partition",
          [
            "n2",
            "a2",
            "ax",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⊃",
      "meanings": [
        [
          "first",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "ng"
          ]
        ],
        [
          "pick",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "mix",
          [
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⊆",
      "meanings": [
        [
          "nest",
          [
            "dy",
            "ex",
            "vi"
          ]
        ],
        [
          "partition",
          [
            "dy",
            "ex",
            "vi"
          ]
        ],
        [
          "subset",
          [
            "n2"
          ]
        ],
        [
          "penclose",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⊇",
      "meanings": [
        [
          "discloseIfScalar",
          [
            "ex"
          ]
        ],
        [
          "from",
          [
            "ex",
            "vi",
            "dz",
            "ka"
          ]
        ],
        [
          "last",
          [
            "vi"
          ]
        ],
        [
          "superset",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "⌷",
      "meanings": [
        [
          "index",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "materialize",
          [
            "dy",
            "ex",
            "vi"
          ]
        ],
        [
          "mapKV",
          [
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "⍋",
      "meanings": [
        [
          "gradeUp",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "gradeUpD",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⍒",
      "meanings": [
        [
          "gradeDown",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "gradeDownD",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⍳",
      "meanings": [
        [
          "indexGeneratorR",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ],
        [
          "indexGeneratorI",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i2",
            "ng"
          ]
        ],
        [
          "indexOf",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⍸",
      "meanings": [
        [
          "where",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2"
          ]
        ],
        [
          "intervalIndex",
          [
            "dy",
            "ex",
            "vi"
          ]
        ],
        [
          "arrayLookup",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "∊",
      "meanings": [
        [
          "elementOf",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "enlist",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⍷",
      "meanings": [
        [
          "find",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "type",
          [
            "ex",
            "vi"
          ]
        ]
      ]
    },
    {
      "glyph": "∪",
      "meanings": [
        [
          "union",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "nub",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "ax",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "∩",
      "meanings": [
        [
          "intersection",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "nubIn",
          [
            "ex"
          ]
        ]
      ]
    },
    {
      "glyph": "~",
      "meanings": [
        [
          "not",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "without",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "m1",
          [
            "ex"
          ]
        ]
      ]
    },
    {
      "glyph": "§",
      "meanings": [
        [
          "symDiff",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "/",
      "meanings": [
        [
          "reduce",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "wreduce",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "compress",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "gn",
            "i1",
            "i2",
            "ng"
          ]
        ],
        [
          "replicate",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "gn",
            "i2",
            "ng"
          ]
        ],
        [
          "compressO",
          [
            "a2",
            "ax"
          ]
        ],
        [
          "replicateO",
          [
            "a2",
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": "⌿",
      "meanings": [
        [
          "reduceF",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "wreduceF",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "compressF",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i1",
            "i2",
            "ng"
          ]
        ],
        [
          "replicateF",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i2",
            "ng"
          ]
        ],
        [
          "compressOF",
          [
            "a2",
            "ax"
          ]
        ],
        [
          "replicateOF",
          [
            "a2",
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": "\\",
      "meanings": [
        [
          "scan",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "expand",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i1",
            "i2"
          ]
        ],
        [
          "outerProduct",
          [
            "ex"
          ]
        ],
        [
          "expandO",
          [
            "a2",
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": "⍀",
      "meanings": [
        [
          "scanF",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "expandF",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i1",
            "i2"
          ]
        ],
        [
          "applyRight",
          [
            "ex"
          ]
        ],
        [
          "expandOF",
          [
            "a2",
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": ",",
      "meanings": [
        [
          "ravel",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "cat",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍪",
      "meanings": [
        [
          "table",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i2",
            "ng",
            "ka"
          ]
        ],
        [
          "catF",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "ravel",
          [
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": "⍴",
      "meanings": [
        [
          "shape",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ],
        [
          "reshape",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⌽",
      "meanings": [
        [
          "reverse",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "rotate",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⊖",
      "meanings": [
        [
          "reverseF",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "rotateF",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍉",
      "meanings": [
        [
          "transpose",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "transposeD",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "¨",
      "meanings": [
        [
          "each1",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "each2",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍨",
      "meanings": [
        [
          "constant",
          [
            "dy",
            "ex",
            "vi",
            "dz"
          ]
        ],
        [
          "commute",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i2",
            "ng",
            "ka"
          ]
        ],
        [
          "duplicate",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "i2",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍣",
      "meanings": [
        [
          "repeat",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ng",
            "ka"
          ]
        ],
        [
          "until",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍡",
      "meanings": [
        [
          "cumulativeRepeat",
          [
            "dz"
          ]
        ],
        [
          "convolution",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": ".",
      "meanings": [
        [
          "innerProduct",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "alternant",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "∙",
      "meanings": [
        [
          "innerProduct",
          [
            "ex"
          ]
        ],
        [
          "alternant",
          [
            "ex"
          ]
        ]
      ]
    },
    {
      "glyph": "∘.",
      "meanings": [
        [
          "outerProduct",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "∘",
      "meanings": [
        [
          "compose",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ng"
          ]
        ],
        [
          "after",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ng",
            "ka"
          ]
        ],
        [
          "bind",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ng"
          ]
        ],
        [
          "matrixProduct",
          [
            "gn"
          ]
        ],
        [
          "withe",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍛",
      "meanings": [
        [
          "before",
          [
            "ex",
            "vi",
            "dz",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍤",
      "meanings": [
        [
          "compose",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2"
          ]
        ],
        [
          "atop",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2"
          ]
        ],
        [
          "atRank",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "gn",
            "i2",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍥",
      "meanings": [
        [
          "compose",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ka"
          ]
        ],
        [
          "over",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ka"
          ]
        ],
        [
          "atDepth",
          [
            "ex",
            "vi"
          ]
        ]
      ]
    },
    {
      "glyph": "⍢",
      "meanings": [
        [
          "under",
          [
            "ex",
            "vi",
            "dz",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "ᐵ",
      "meanings": [
        [
          "eachLeft",
          [
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "ᑈ",
      "meanings": [
        [
          "eachRight",
          [
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "@",
      "meanings": [
        [
          "at",
          [
            "dy",
            "ex",
            "vi",
            "dz"
          ]
        ],
        [
          "oneChar",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍫",
      "meanings": [
        [
          "obverse",
          [
            "ex",
            "vi",
            "dz"
          ]
        ],
        [
          "lock",
          [
            "a2",
            "ax"
          ]
        ],
        [
          "return",
          [
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⎕",
      "meanings": [
        [
          "evalInput",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ],
        [
          "stdout",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ],
        [
          "sys",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⍞",
      "meanings": [
        [
          "stringInput",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ],
        [
          "stderr",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng"
          ]
        ],
        [
          "applyFnRef",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍠",
      "meanings": [
        [
          "variant",
          [
            "dy",
            "ex",
            "vi",
            "n2"
          ]
        ],
        [
          "valences",
          [
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⌸",
      "meanings": [
        [
          "keyI",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "ng"
          ]
        ],
        [
          "keyV",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "ng"
          ]
        ],
        [
          "keyVocI",
          [
            "vi"
          ]
        ],
        [
          "keyVocV",
          [
            "vi"
          ]
        ],
        [
          "getMap",
          [
            "dz"
          ]
        ],
        [
          "setMap",
          [
            "dz"
          ]
        ],
        [
          "keyF",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍁",
      "meanings": [
        [
          "diagonals",
          [
            "dz"
          ]
        ],
        [
          "idElem",
          [
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⌺",
      "meanings": [
        [
          "stencil",
          [
            "dy",
            "ex",
            "vi"
          ]
        ]
      ]
    },
    {
      "glyph": "⌶",
      "meanings": [
        [
          "beam",
          [
            "dy",
            "ex",
            "vi"
          ]
        ]
      ]
    },
    {
      "glyph": "⍎",
      "meanings": [
        [
          "execute",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍕",
      "meanings": [
        [
          "format",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "dformat",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax"
          ]
        ],
        [
          "formatByExample",
          [
            "a2",
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": "⍬",
      "meanings": [
        [
          "zilde",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ax",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "∞",
      "meanings": [
        [
          "inf",
          [
            "ex",
            "dz",
            "n2",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "¯∞",
      "meanings": [
        [
          "ninf",
          [
            "ex",
            "dz",
            "n2",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "∅",
      "meanings": [
        [
          "nan",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "#",
      "meanings": [
        [
          "rootNs",
          [
            "dy",
            "ex",
            "vi"
          ]
        ]
      ]
    },
    {
      "glyph": "##",
      "meanings": [
        [
          "parentNs",
          [
            "dy",
            "ex",
            "vi"
          ]
        ]
      ]
    },
    {
      "glyph": "⌾",
      "meanings": [
        [
          "cartD",
          [
            "ex"
          ]
        ],
        [
          "cartM",
          [
            "ex"
          ]
        ],
        [
          "outerProduct",
          [
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "$",
      "meanings": [
        [
          "mstringE",
          [
            "ex",
            "vi"
          ]
        ],
        [
          "dstringE",
          [
            "ex",
            "vi"
          ]
        ],
        [
          "hex",
          [
            "gn"
          ]
        ]
      ]
    },
    {
      "glyph": "…",
      "meanings": [
        [
          "range",
          [
            "ex",
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "..",
      "meanings": [
        [
          "range",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "⍦",
      "meanings": [
        [
          "multisets",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "⍧",
      "meanings": [
        [
          "nubSieve",
          [
            "ex",
            "dz"
          ]
        ],
        [
          "countIn",
          [
            "ex",
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "%",
      "meanings": [
        [
          "probab",
          [
            "ex"
          ]
        ],
        [
          "merge",
          [
            "dz",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍮",
      "meanings": [
        [
          "pair",
          [
            "ex",
            "dz"
          ]
        ],
        [
          "halfPair",
          [
            "ex",
            "dz"
          ]
        ]
      ]
    },
    {
      "glyph": "⍭",
      "meanings": [
        [
          "factors",
          [
            "ex"
          ]
        ],
        [
          "primeRelated",
          [
            "ex"
          ]
        ]
      ]
    },
    {
      "glyph": "π",
      "meanings": [
        [
          "primeFactors",
          [
            "n2"
          ]
        ],
        [
          "primeRelated",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "⊙",
      "meanings": [
        [
          "null",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "‼",
      "meanings": [
        [
          "combinatorial",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "⌻",
      "meanings": [
        [
          "matrix",
          [
            "n2"
          ]
        ],
        [
          "outerProduct",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "∂",
      "meanings": [
        [
          "deriv",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "∫",
      "meanings": [
        [
          "integ",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "⍑",
      "meanings": [
        [
          "transform",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "&",
      "meanings": [
        [
          "spawn",
          [
            "dy",
            "ex",
            "vi"
          ]
        ]
      ]
    },
    {
      "glyph": "⊤∧",
      "meanings": [
        [
          "bitAnd",
          [
            "gn"
          ]
        ],
        [
          "bitAnd0",
          [
            "gn"
          ]
        ]
      ]
    },
    {
      "glyph": "⊤∨",
      "meanings": [
        [
          "bitOr",
          [
            "gn"
          ]
        ],
        [
          "bitOr0",
          [
            "gn"
          ]
        ]
      ]
    },
    {
      "glyph": "⊤⍲",
      "meanings": [
        [
          "bitNand",
          [
            "gn"
          ]
        ]
      ]
    },
    {
      "glyph": "⊤⍱",
      "meanings": [
        [
          "bitNor",
          [
            "gn"
          ]
        ],
        [
          "bitNor0",
          [
            "gn"
          ]
        ]
      ]
    },
    {
      "glyph": "⊤≠",
      "meanings": [
        [
          "bitXor",
          [
            "gn"
          ]
        ]
      ]
    },
    {
      "glyph": "⊤=",
      "meanings": [
        [
          "bitXnor",
          [
            "gn"
          ]
        ]
      ]
    },
    {
      "glyph": "⍇",
      "meanings": [
        [
          "fileRead",
          [
            "ax"
          ]
        ],
        [
          "fileInfo",
          [
            "ax"
          ]
        ],
        [
          "fileRename",
          [
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": "⍈",
      "meanings": [
        [
          "fileWrite",
          [
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": "⍐",
      "meanings": [
        [
          "fileSetAllocation",
          [
            "ax"
          ]
        ],
        [
          "fileHold",
          [
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": "⍗",
      "meanings": [
        [
          "fileDelete",
          [
            "ax"
          ]
        ],
        [
          "fileDeleteC",
          [
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": "≈",
      "meanings": [
        [
          "approxEq",
          [
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "↗",
      "meanings": [
        [
          "raise",
          [
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⫽",
      "meanings": [
        [
          "compress",
          [
            "ka"
          ]
        ],
        [
          "replicate",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "∵",
      "meanings": [
        [
          "bitwise",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "˝",
      "meanings": [
        [
          "inverseF",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "{}",
      "meanings": [
        [
          "dfn",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "ng",
            "ka"
          ]
        ],
        [
          "dop",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "ng"
          ]
        ],
        [
          "dhyp",
          [
            "n2"
          ]
        ],
        [
          "shyRes",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn"
          ]
        ],
        [
          "optLeft",
          [
            "dy",
            "ex",
            "vi"
          ]
        ]
      ]
    },
    {
      "glyph": "⍺",
      "meanings": [
        [
          "larg",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "ng",
            "ka"
          ]
        ],
        [
          "pictureFormat",
          [
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": "⍵",
      "meanings": [
        [
          "rarg",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "gn",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⍺⍺",
      "meanings": [
        [
          "lop",
          [
            "dy",
            "ex",
            "vi",
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "⍶",
      "meanings": [
        [
          "lop",
          [
            "dz",
            "gn",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⍵⍵",
      "meanings": [
        [
          "rop",
          [
            "dy",
            "ex",
            "vi",
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "⍹",
      "meanings": [
        [
          "rop",
          [
            "dz",
            "gn",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⍺⍺⍺",
      "meanings": [
        [
          "lhyp",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "⍵⍵⍵",
      "meanings": [
        [
          "rhyp",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "χ",
      "meanings": [
        [
          "axisArg",
          [
            "n2",
            "gn"
          ]
        ]
      ]
    },
    {
      "glyph": ":",
      "meanings": [
        [
          "guard",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2"
          ]
        ],
        [
          "control",
          [
            "dy",
            "ex",
            "vi",
            "n2"
          ]
        ],
        [
          "label",
          [
            "dy",
            "ex",
            "vi",
            "gn",
            "i2"
          ]
        ]
      ]
    },
    {
      "glyph": "::",
      "meanings": [
        [
          "errorGuard",
          [
            "dy",
            "ex",
            "vi"
          ]
        ]
      ]
    },
    {
      "glyph": "[]",
      "meanings": [
        [
          "bindex",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax"
          ]
        ],
        [
          "axis",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": ";",
      "meanings": [
        [
          "semi",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax"
          ]
        ],
        [
          "localVar",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax"
          ]
        ],
        [
          "tuple",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "←",
      "meanings": [
        [
          "assign",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "return",
          [
            "dz"
          ]
        ],
        [
          "sink",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "⇐",
      "meanings": [
        [
          "assignFn",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "→",
      "meanings": [
        [
          "branch",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax"
          ]
        ],
        [
          "return",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "∇",
      "meanings": [
        [
          "tradfn",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax"
          ]
        ],
        [
          "recfn",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ng"
          ]
        ],
        [
          "globalFn",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "∇∇",
      "meanings": [
        [
          "recop",
          [
            "dy",
            "ex",
            "vi",
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "∇∇∇",
      "meanings": [
        [
          "rechyp",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "¯",
      "meanings": [
        [
          "negative",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ],
        [
          "inverse",
          [
            "ex"
          ]
        ]
      ]
    },
    {
      "glyph": "⌂",
      "meanings": [
        [
          "dfns",
          [
            "ex"
          ]
        ]
      ]
    },
    {
      "glyph": "E",
      "meanings": [
        [
          "eS",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "e",
      "meanings": [
        [
          "eS",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "J",
      "meanings": [
        [
          "jS",
          [
            "dy",
            "ex",
            "vi",
            "n2",
            "a2",
            "gn",
            "i2",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "j",
      "meanings": [
        [
          "jS",
          [
            "dy",
            "ex",
            "vi",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "i",
      "meanings": [
        [
          "jS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "D",
      "meanings": [
        [
          "adS",
          [
            "a2"
          ]
        ]
      ]
    },
    {
      "glyph": "R",
      "meanings": [
        [
          "arS",
          [
            "a2"
          ]
        ]
      ]
    },
    {
      "glyph": "ad",
      "meanings": [
        [
          "adS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "ah",
      "meanings": [
        [
          "ahS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "ar",
      "meanings": [
        [
          "arS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "au",
      "meanings": [
        [
          "auS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "b",
      "meanings": [
        [
          "bS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "g",
      "meanings": [
        [
          "gS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "p",
      "meanings": [
        [
          "pS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "r",
      "meanings": [
        [
          "rS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "v",
      "meanings": [
        [
          "vS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "x",
      "meanings": [
        [
          "xS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "z",
      "meanings": [
        [
          "zS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "±",
      "meanings": [
        [
          "ball",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "ijk",
      "meanings": [
        [
          "ijkS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "ijkl",
      "meanings": [
        [
          "ijklS",
          [
            "n2"
          ]
        ]
      ]
    },
    {
      "glyph": "0x",
      "meanings": [
        [
          "hex",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "⋄",
      "meanings": [
        [
          "sep",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i2",
            "ax",
            "ng"
          ]
        ]
      ]
    },
    {
      "glyph": "⍝",
      "meanings": [
        [
          "comment",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax",
            "ng",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "'",
      "meanings": [
        [
          "char",
          [
            "dy",
            "ex",
            "vi",
            "dz",
            "n2",
            "a2",
            "gn",
            "i1",
            "i2",
            "ax"
          ]
        ]
      ]
    },
    {
      "glyph": "\"",
      "meanings": [
        [
          "str",
          [
            "dz",
            "gn",
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "λ",
      "meanings": [
        [
          "createFnRef",
          [
            "ka"
          ]
        ]
      ]
    },
    {
      "glyph": "«»",
      "meanings": [
        [
          "fork",
          [
            "ka"
          ]
        ]
      ]
    }
  ]
}